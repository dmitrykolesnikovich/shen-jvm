package com.shenjvm;

public interface KLSymbolPool {
    public static final KLSymbol IF = KLPrimitive.intern("if");
    public static final KLSymbol AND = KLPrimitive.intern("and");
    public static final KLSymbol OR = KLPrimitive.intern("or");
    public static final KLSymbol COND = KLPrimitive.intern("cond");
    public static final KLSymbol INTERN = KLPrimitive.intern("intern");
    public static final KLSymbol POS = KLPrimitive.intern("pos");
    public static final KLSymbol TLSTR = KLPrimitive.intern("tlstr");
    public static final KLSymbol CN = KLPrimitive.intern("cn");
    public static final KLSymbol STR = KLPrimitive.intern("str");
    public static final KLSymbol IS_STRING = KLPrimitive.intern("string?");
    public static final KLSymbol N_TO_STRING = KLPrimitive.intern("n->string");
    public static final KLSymbol STRING_TO_N = KLPrimitive.intern("string->n");
    public static final KLSymbol SET = KLPrimitive.intern("set");
    public static final KLSymbol VALUE = KLPrimitive.intern("value");
    public static final KLSymbol SIMPLE_ERROR = KLPrimitive.intern("simple-error");
    public static final KLSymbol TRAP_ERROR = KLPrimitive.intern("trap-error");
    public static final KLSymbol TRAP_ERROR_HELPER = KLPrimitive.intern("trap-error-h");
    public static final KLSymbol ERROR_TO_STRING = KLPrimitive.intern("error-to-string");
    public static final KLSymbol CONS = KLPrimitive.intern("cons");
    public static final KLSymbol HD = KLPrimitive.intern("hd");
    public static final KLSymbol TL = KLPrimitive.intern("tl");
    public static final KLSymbol IS_CONS = KLPrimitive.intern("cons?");
    public static final KLSymbol DEFUN = KLPrimitive.intern("defun");
    public static final KLSymbol LAMBDA = KLPrimitive.intern("lambda");
    public static final KLSymbol LET = KLPrimitive.intern("let");
    public static final KLSymbol EQUAL = KLPrimitive.intern("=");
    public static final KLSymbol EVAL_KL = KLPrimitive.intern("eval-kl");
    public static final KLSymbol FREEZE = KLPrimitive.intern("freeze");
    public static final KLSymbol TYPE = KLPrimitive.intern("type");
    public static final KLSymbol ABSVECTOR = KLPrimitive.intern("absvector");
    public static final KLSymbol SET_ABSVECTOR_ELEMENT = KLPrimitive.intern("address->");
    public static final KLSymbol GET_ABSVECTOR_ELEMENT = KLPrimitive.intern("<-address");
    public static final KLSymbol IS_ABSVECTOR = KLPrimitive.intern("absvector?");
    public static final KLSymbol WRITE_BYTE = KLPrimitive.intern("write-byte");
    public static final KLSymbol READ_BYTE = KLPrimitive.intern("read-byte");
    public static final KLSymbol OPEN = KLPrimitive.intern("open");
    public static final KLSymbol CLOSE = KLPrimitive.intern("close");
    public static final KLSymbol GET_TIME = KLPrimitive.intern("get-time");
    public static final KLSymbol ADD = KLPrimitive.intern("+");
    public static final KLSymbol SUBTRACT = KLPrimitive.intern("-");
    public static final KLSymbol MULTIPLY = KLPrimitive.intern("*");
    public static final KLSymbol DIVIDE = KLPrimitive.intern("/");
    public static final KLSymbol GREATER = KLPrimitive.intern(">");
    public static final KLSymbol LESS = KLPrimitive.intern("<");
    public static final KLSymbol GREATER_OR_EQUAL = KLPrimitive.intern(">=");
    public static final KLSymbol LESS_OR_EQUAL = KLPrimitive.intern("<=");
    public static final KLSymbol IS_NUMBER = KLPrimitive.intern("number?");

    public static final KLSymbol TRUE = KLPrimitive.intern("true");
    public static final KLSymbol FALSE = KLPrimitive.intern("false");
    public static final KLSymbol OUT = KLPrimitive.intern("out");
    public static final KLSymbol IN = KLPrimitive.intern("in");
    public static final KLSymbol UNIX = KLPrimitive.intern("unix");
    public static final KLSymbol RUN = KLPrimitive.intern("run");

    public static final KLSymbol DO = KLPrimitive.intern("do");
    public static final KLSymbol FAIL = KLPrimitive.intern("fail");
    public static final KLSymbol HASH = KLPrimitive.intern("hash");
    public static final KLSymbol IS_BOOLEAN = KLPrimitive.intern("boolean?");
    public static final KLSymbol IS_ELEMENT = KLPrimitive.intern("element?");
    public static final KLSymbol IS_INTEGER = KLPrimitive.intern("integer?");
    public static final KLSymbol IS_SYMBOL = KLPrimitive.intern("symbol?");
    public static final KLSymbol IS_VARIABLE = KLPrimitive.intern("variable?");
    public static final KLSymbol PR = KLPrimitive.intern("pr");
    public static final KLSymbol READ_FILE_AS_CHARLIST = KLPrimitive.intern("read-file-as-charlist");
    public static final KLSymbol READ_FILE_AS_STRING = KLPrimitive.intern("read-file-as-string");
    public static final KLSymbol SHEN_BINDV = KLPrimitive.intern("shen.bindv");
    public static final KLSymbol SHEN_COPY_VECTOR = KLPrimitive.intern("shen.copy-vector");
    public static final KLSymbol SHEN_DEREF = KLPrimitive.intern("shen.deref");
    public static final KLSymbol SHEN_EARMUFF_VARCOUNTER = KLPrimitive.intern("shen.*varcounter*");
    public static final KLSymbol SHEN_FAIL_BANG = KLPrimitive.intern("shen.fail!");
    public static final KLSymbol SHEN_INCINFS = KLPrimitive.intern("shen.incinfs");
    public static final KLSymbol SHEN_IS_PVAR = KLPrimitive.intern("shen.pvar?");
    public static final KLSymbol SHEN_LAZYDEREF = KLPrimitive.intern("shen.lazyderef");
    public static final KLSymbol SHEN_MK_PVAR = KLPrimitive.intern("shen.mk-pvar");
    public static final KLSymbol SHEN_NEWPV = KLPrimitive.intern("shen.newpv");
    public static final KLSymbol SHEN_NULL = KLPrimitive.intern("shen.-null-");
    public static final KLSymbol SHEN_PVAR = KLPrimitive.intern("shen.pvar");
    public static final KLSymbol SHEN_EARMUFF_PROLOGVECTORS = KLPrimitive.intern("shen.*prologvectors*");
    public static final KLSymbol SHEN_EARMUFF_INFS = KLPrimitive.intern("shen.*infs*");
    public static final KLSymbol SHEN_RESIZE_PROCESS_VECTOR = KLPrimitive.intern("shen.resizeprocessvector");
    public static final KLSymbol SHEN_RESIZE_VECTOR = KLPrimitive.intern("shen.resize-vector");
    public static final KLSymbol SHEN_UNBINDV = KLPrimitive.intern("shen.unbindv");
    public static final KLSymbol SHEN_VALVECTOR = KLPrimitive.intern("shen.valvector");

    public static final KLSymbol QUIT = KLPrimitive.intern("quit");
    public static final KLSymbol SHEN_JVM_FORWARD_DECLARE_FUNCTION = KLPrimitive.intern("sj.forward-declare-function");
    public static final KLSymbol SHEN_JVM_PRINTLN = KLPrimitive.intern("sj.println");

    public static final KLSymbol EARMUFF_ARGV = KLPrimitive.intern("*argv*");
    public static final KLSymbol EARMUFF_HOME_DIRECTORY = KLPrimitive.intern("*home-directory*");
    public static final KLSymbol EARMUFF_IMPLEMENTATION = KLPrimitive.intern("*implementation*");
    public static final KLSymbol EARMUFF_LANGUAGE = KLPrimitive.intern("*language*");
    public static final KLSymbol EARMUFF_PORT = KLPrimitive.intern("*port*");
    public static final KLSymbol EARMUFF_PORTERS = KLPrimitive.intern("*porters*");
    public static final KLSymbol EARMUFF_STERROR = KLPrimitive.intern("*sterror*");
    public static final KLSymbol EARMUFF_STINPUT = KLPrimitive.intern("*stinput*");
    public static final KLSymbol EARMUFF_STOUTPUT = KLPrimitive.intern("*stoutput*");
}
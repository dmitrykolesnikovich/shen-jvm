"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.shen () (do (shen.credits) (shen.loop)))

(set shen.*continue-repl-loop* true)

(defun exit (V2640) (set shen.*continue-repl-loop* false))

(defun shen.loop () (do (shen.initialise_environment) (do (shen.prompt) (do (trap-error (shen.read-evaluate-print) (lambda E (pr (error-to-string E) (stoutput)))) (if (value shen.*continue-repl-loop*) (shen.loop) exit)))))

(defun shen.credits () (do (shen.prhush "
Shen, copyright (C) 2010-2015 Mark Tarver
" (stoutput)) (do (shen.prhush (cn "www.shenlanguage.org, " (shen.app (value *version*) "
" shen.a)) (stoutput)) (do (shen.prhush (cn "running under " (shen.app (value *language*) (cn ", implementation: " (shen.app (value *implementation*) "" shen.a)) shen.a)) (stoutput)) (shen.prhush (cn "
port " (shen.app (value *port*) (cn " ported by " (shen.app (value *porters*) "
" shen.a)) shen.a)) (stoutput))))))

(defun shen.initialise_environment () (shen.multiple-set (cons shen.*call* (cons 0 (cons shen.*infs* (cons 0 (cons shen.*process-counter* (cons 0 (cons shen.*catch* (cons 0 ()))))))))))

(defun shen.multiple-set (V2642) (cond ((= () V2642) ()) ((and (cons? V2642) (cons? (tl V2642))) (do (set (hd V2642) (hd (tl V2642))) (shen.multiple-set (tl (tl V2642))))) (true (shen.f_error shen.multiple-set))))

(defun destroy (V2644) (declare V2644 symbol))

(set shen.*history* ())

(defun shen.read-evaluate-print () (let Lineread (shen.toplineread) (let History (value shen.*history*) (let NewLineread (shen.retrieve-from-history-if-needed Lineread History) (let NewHistory (shen.update_history NewLineread History) (let Parsed (fst NewLineread) (shen.toplevel Parsed)))))))

(defun shen.retrieve-from-history-if-needed (V2656 V2657) (cond ((and (tuple? V2656) (and (cons? (snd V2656)) (element? (hd (snd V2656)) (cons (shen.space) (cons (shen.newline) ()))))) (shen.retrieve-from-history-if-needed (@p (fst V2656) (tl (snd V2656))) V2657)) ((and (tuple? V2656) (and (cons? (snd V2656)) (and (cons? (tl (snd V2656))) (and (= () (tl (tl (snd V2656)))) (and (cons? V2657) (and (= (hd (snd V2656)) (shen.exclamation)) (= (hd (tl (snd V2656))) (shen.exclamation)))))))) (let PastPrint (shen.prbytes (snd (hd V2657))) (hd V2657))) ((and (tuple? V2656) (and (cons? (snd V2656)) (= (hd (snd V2656)) (shen.exclamation)))) (let Key? (shen.make-key (tl (snd V2656)) V2657) (let Find (head (shen.find-past-inputs Key? V2657)) (let PastPrint (shen.prbytes (snd Find)) Find)))) ((and (tuple? V2656) (and (cons? (snd V2656)) (and (= () (tl (snd V2656))) (= (hd (snd V2656)) (shen.percent))))) (do (shen.print-past-inputs (lambda X true) (reverse V2657) 0) (abort))) ((and (tuple? V2656) (and (cons? (snd V2656)) (= (hd (snd V2656)) (shen.percent)))) (let Key? (shen.make-key (tl (snd V2656)) V2657) (let Pastprint (shen.print-past-inputs Key? (reverse V2657) 0) (abort)))) (true V2656)))

(defun shen.percent () 37)

(defun shen.exclamation () 33)

(defun shen.prbytes (V2659) (do (for-each (lambda Byte (pr (n->string Byte) (stoutput))) V2659) (nl 1)))

(defun shen.update_history (V2662 V2663) (set shen.*history* (cons V2662 V2663)))

(defun shen.toplineread () (shen.toplineread_loop (read-char-code (stinput)) ()))

(defun shen.toplineread_loop (V2667 V2668) (cond ((and (= -1 V2667) (= () V2668)) (exit 0)) ((= V2667 (shen.hat)) (simple-error "line read aborted")) ((element? V2667 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V2668 (lambda E shen.nextline)) (let It (shen.record-it V2668) (if (or (= Line shen.nextline) (empty? Line)) (shen.toplineread_loop (read-char-code (stinput)) (append V2668 (cons V2667 ()))) (@p Line V2668))))) (true (shen.toplineread_loop (read-char-code (stinput)) (if (= V2667 -1) V2668 (append V2668 (cons V2667 ())))))))

(defun shen.hat () 94)

(defun shen.newline () 10)

(defun shen.carriage-return () 13)

(defun tc (V2674) (cond ((= + V2674) (set shen.*tc* true)) ((= - V2674) (set shen.*tc* false)) (true (simple-error "tc expects a + or -"))))

(defun shen.prompt () (if (value shen.*tc*) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "+) " shen.a)) (stoutput)) (shen.prhush (cn "

(" (shen.app (length (value shen.*history*)) "-) " shen.a)) (stoutput))))

(defun shen.toplevel (V2676) (shen.toplevel_evaluate V2676 (value shen.*tc*)))

(defun shen.find-past-inputs (V2679 V2680) (let F (shen.find V2679 V2680) (if (empty? F) (simple-error "input not found
") F)))

(defun shen.make-key (V2683 V2684) (let Atom (hd (compile (lambda X (shen.<st_input> X)) V2683 (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
"))))) (if (integer? Atom) (lambda X (= X (nth (+ Atom 1) (reverse V2684)))) (lambda X (shen.prefix? V2683 (shen.trim-gubbins (snd X)))))))

(defun shen.trim-gubbins (V2686) (cond ((and (cons? V2686) (= (hd V2686) (shen.space))) (shen.trim-gubbins (tl V2686))) ((and (cons? V2686) (= (hd V2686) (shen.newline))) (shen.trim-gubbins (tl V2686))) ((and (cons? V2686) (= (hd V2686) (shen.carriage-return))) (shen.trim-gubbins (tl V2686))) ((and (cons? V2686) (= (hd V2686) (shen.tab))) (shen.trim-gubbins (tl V2686))) ((and (cons? V2686) (= (hd V2686) (shen.left-round))) (shen.trim-gubbins (tl V2686))) (true V2686)))

(defun shen.space () 32)

(defun shen.tab () 9)

(defun shen.left-round () 40)

(defun shen.find (V2695 V2696) (cond ((= () V2696) ()) ((and (cons? V2696) (V2695 (hd V2696))) (cons (hd V2696) (shen.find V2695 (tl V2696)))) ((cons? V2696) (shen.find V2695 (tl V2696))) (true (shen.f_error shen.find))))

(defun shen.prefix? (V2710 V2711) (cond ((= () V2710) true) ((and (cons? V2710) (and (cons? V2711) (= (hd V2711) (hd V2710)))) (shen.prefix? (tl V2710) (tl V2711))) (true false)))

(defun shen.print-past-inputs (V2723 V2724 V2725) (cond ((= () V2724) _) ((and (cons? V2724) (not (V2723 (hd V2724)))) (shen.print-past-inputs V2723 (tl V2724) (+ V2725 1))) ((and (cons? V2724) (tuple? (hd V2724))) (do (shen.prhush (shen.app V2725 ". " shen.a) (stoutput)) (do (shen.prbytes (snd (hd V2724))) (shen.print-past-inputs V2723 (tl V2724) (+ V2725 1))))) (true (shen.f_error shen.print-past-inputs))))

(defun shen.toplevel_evaluate (V2728 V2729) (cond ((and (cons? V2728) (and (cons? (tl V2728)) (and (= : (hd (tl V2728))) (and (cons? (tl (tl V2728))) (and (= () (tl (tl (tl V2728)))) (= true V2729)))))) (shen.typecheck-and-evaluate (hd V2728) (hd (tl (tl V2728))))) ((and (cons? V2728) (cons? (tl V2728))) (do (shen.toplevel_evaluate (cons (hd V2728) ()) V2729) (do (nl 1) (shen.toplevel_evaluate (tl V2728) V2729)))) ((and (cons? V2728) (and (= () (tl V2728)) (= true V2729))) (shen.typecheck-and-evaluate (hd V2728) (gensym A))) ((and (cons? V2728) (and (= () (tl V2728)) (= false V2729))) (let Eval (shen.eval-without-macros (hd V2728)) (print Eval))) (true (shen.f_error shen.toplevel_evaluate))))

(defun shen.typecheck-and-evaluate (V2732 V2733) (let Typecheck (shen.typecheck V2732 V2733) (if (= Typecheck false) (simple-error "type error
") (let Eval (shen.eval-without-macros V2732) (let Type (shen.pretty-type Typecheck) (shen.prhush (shen.app Eval (cn " : " (shen.app Type "" shen.r)) shen.s) (stoutput)))))))

(defun shen.pretty-type (V2735) (shen.mult_subst (value shen.*alphabet*) (shen.extract-pvars V2735) V2735))

(defun shen.extract-pvars (V2741) (cond ((shen.pvar? V2741) (cons V2741 ())) ((cons? V2741) (union (shen.extract-pvars (hd V2741)) (shen.extract-pvars (tl V2741)))) (true ())))

(defun shen.mult_subst (V2749 V2750 V2751) (cond ((= () V2749) V2751) ((= () V2750) V2751) ((and (cons? V2749) (cons? V2750)) (shen.mult_subst (tl V2749) (tl V2750) (subst (hd V2749) (hd V2750) V2751))) (true (shen.f_error shen.mult_subst))))




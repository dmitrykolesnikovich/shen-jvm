"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.<defprolog> (V454) (let Parse_shen.<predicate*> (shen.<predicate*> V454) (if (not (= (fail) Parse_shen.<predicate*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<predicate*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (hd (shen.prolog->shen (map (lambda Parse_X (shen.insert-predicate (shen.hdtl Parse_shen.<predicate*>) Parse_X)) (shen.hdtl Parse_shen.<clauses*>))))) (fail))) (fail))))

(defun shen.prolog-error (V463 V464) (cond ((and (cons? V464) (and (cons? (tl V464)) (= () (tl (tl V464))))) (simple-error (cn "prolog syntax error in " (shen.app V463 (cn " here:

 " (shen.app (shen.next-50 50 (hd V464)) "
" shen.a)) shen.a)))) (true (simple-error (cn "prolog syntax error in " (shen.app V463 "
" shen.a))))))

(defun shen.next-50 (V471 V472) (cond ((= () V472) "") ((= 0 V471) "") ((cons? V472) (cn (shen.decons-string (hd V472)) (shen.next-50 (- V471 1) (tl V472)))) (true (shen.f_error shen.next-50))))

(defun shen.decons-string (V474) (cond ((and (cons? V474) (and (= cons (hd V474)) (and (cons? (tl V474)) (and (cons? (tl (tl V474))) (= () (tl (tl (tl V474)))))))) (shen.app (shen.eval-cons V474) " " shen.s)) (true (shen.app V474 " " shen.r))))

(defun shen.insert-predicate (V477 V478) (cond ((and (cons? V478) (and (cons? (tl V478)) (= () (tl (tl V478))))) (cons (cons V477 (hd V478)) (cons :- (tl V478)))) (true (shen.f_error shen.insert-predicate))))

(defun shen.<predicate*> (V480) (if (cons? (hd V480)) (let Parse_X (hd (hd V480)) (shen.pair (hd (shen.pair (tl (hd V480)) (shen.hdtl V480))) Parse_X)) (fail)))

(defun shen.<clauses*> (V482) (let YaccParse (let Parse_shen.<clause*> (shen.<clause*> V482) (if (not (= (fail) Parse_shen.<clause*>)) (let Parse_shen.<clauses*> (shen.<clauses*> Parse_shen.<clause*>) (if (not (= (fail) Parse_shen.<clauses*>)) (shen.pair (hd Parse_shen.<clauses*>) (cons (shen.hdtl Parse_shen.<clause*>) (shen.hdtl Parse_shen.<clauses*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V482) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<clause*> (V484) (let Parse_shen.<head*> (shen.<head*> V484) (if (not (= (fail) Parse_shen.<head*>)) (if (and (cons? (hd Parse_shen.<head*>)) (= <-- (hd (hd Parse_shen.<head*>)))) (let Parse_shen.<body*> (shen.<body*> (shen.pair (tl (hd Parse_shen.<head*>)) (shen.hdtl Parse_shen.<head*>))) (if (not (= (fail) Parse_shen.<body*>)) (let Parse_shen.<end*> (shen.<end*> Parse_shen.<body*>) (if (not (= (fail) Parse_shen.<end*>)) (shen.pair (hd Parse_shen.<end*>) (cons (shen.hdtl Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<body*>) ()))) (fail))) (fail))) (fail)) (fail))))

(defun shen.<head*> (V486) (let YaccParse (let Parse_shen.<term*> (shen.<term*> V486) (if (not (= (fail) Parse_shen.<term*>)) (let Parse_shen.<head*> (shen.<head*> Parse_shen.<term*>) (if (not (= (fail) Parse_shen.<head*>)) (shen.pair (hd Parse_shen.<head*>) (cons (shen.hdtl Parse_shen.<term*>) (shen.hdtl Parse_shen.<head*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V486) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<term*> (V488) (if (cons? (hd V488)) (let Parse_X (hd (hd V488)) (if (and (not (= <-- Parse_X)) (shen.legitimate-term? Parse_X)) (shen.pair (hd (shen.pair (tl (hd V488)) (shen.hdtl V488))) (shen.eval-cons Parse_X)) (fail))) (fail)))

(defun shen.legitimate-term? (V494) (cond ((and (cons? V494) (and (= cons (hd V494)) (and (cons? (tl V494)) (and (cons? (tl (tl V494))) (= () (tl (tl (tl V494)))))))) (and (shen.legitimate-term? (hd (tl V494))) (shen.legitimate-term? (hd (tl (tl V494)))))) ((and (cons? V494) (and (= mode (hd V494)) (and (cons? (tl V494)) (and (cons? (tl (tl V494))) (and (= + (hd (tl (tl V494)))) (= () (tl (tl (tl V494))))))))) (shen.legitimate-term? (hd (tl V494)))) ((and (cons? V494) (and (= mode (hd V494)) (and (cons? (tl V494)) (and (cons? (tl (tl V494))) (and (= - (hd (tl (tl V494)))) (= () (tl (tl (tl V494))))))))) (shen.legitimate-term? (hd (tl V494)))) ((cons? V494) false) (true true)))

(defun shen.eval-cons (V496) (cond ((and (cons? V496) (and (= cons (hd V496)) (and (cons? (tl V496)) (and (cons? (tl (tl V496))) (= () (tl (tl (tl V496)))))))) (cons (shen.eval-cons (hd (tl V496))) (shen.eval-cons (hd (tl (tl V496)))))) ((and (cons? V496) (and (= mode (hd V496)) (and (cons? (tl V496)) (and (cons? (tl (tl V496))) (= () (tl (tl (tl V496)))))))) (cons mode (cons (shen.eval-cons (hd (tl V496))) (tl (tl V496))))) (true V496)))

(defun shen.<body*> (V498) (let YaccParse (let Parse_shen.<literal*> (shen.<literal*> V498) (if (not (= (fail) Parse_shen.<literal*>)) (let Parse_shen.<body*> (shen.<body*> Parse_shen.<literal*>) (if (not (= (fail) Parse_shen.<body*>)) (shen.pair (hd Parse_shen.<body*>) (cons (shen.hdtl Parse_shen.<literal*>) (shen.hdtl Parse_shen.<body*>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V498) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<literal*> (V500) (let YaccParse (if (and (cons? (hd V500)) (= ! (hd (hd V500)))) (shen.pair (hd (shen.pair (tl (hd V500)) (shen.hdtl V500))) (cons cut (cons (intern "Throwcontrol") ()))) (fail)) (if (= YaccParse (fail)) (if (cons? (hd V500)) (let Parse_X (hd (hd V500)) (if (cons? Parse_X) (shen.pair (hd (shen.pair (tl (hd V500)) (shen.hdtl V500))) Parse_X) (fail))) (fail)) YaccParse)))

(defun shen.<end*> (V502) (if (cons? (hd V502)) (let Parse_X (hd (hd V502)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V502)) (shen.hdtl V502))) Parse_X) (fail))) (fail)))

(defun cut (V506 V507 V508) (let Result (thaw V508) (if (= Result false) V506 Result)))

(defun shen.insert_modes (V510) (cond ((and (cons? V510) (and (= mode (hd V510)) (and (cons? (tl V510)) (and (cons? (tl (tl V510))) (= () (tl (tl (tl V510)))))))) V510) ((= () V510) ()) ((cons? V510) (cons (cons mode (cons (hd V510) (cons + ()))) (cons mode (cons (shen.insert_modes (tl V510)) (cons - ()))))) (true V510)))

(defun shen.s-prolog (V512) (map (lambda X (eval X)) (shen.prolog->shen V512)))

(defun shen.prolog->shen (V514) (map (lambda X (shen.compile_prolog_procedure X)) (shen.group_clauses (map (lambda X (shen.s-prolog_clause X)) (mapcan (lambda X (shen.head_abstraction X)) V514)))))

(defun shen.s-prolog_clause (V516) (cond ((and (cons? V516) (and (cons? (tl V516)) (and (= :- (hd (tl V516))) (and (cons? (tl (tl V516))) (= () (tl (tl (tl V516)))))))) (cons (hd V516) (cons :- (cons (map (lambda X (shen.s-prolog_literal X)) (hd (tl (tl V516)))) ())))) (true (shen.f_error shen.s-prolog_clause))))

(defun shen.head_abstraction (V518) (cond ((and (cons? V518) (and (cons? (tl V518)) (and (= :- (hd (tl V518))) (and (cons? (tl (tl V518))) (and (= () (tl (tl (tl V518)))) (trap-error (< (shen.complexity_head (hd V518)) (value shen.*maxcomplexity*)) (lambda _ false))))))) (cons V518 ())) ((and (cons? V518) (and (cons? (hd V518)) (and (cons? (tl V518)) (and (= :- (hd (tl V518))) (and (cons? (tl (tl V518))) (= () (tl (tl (tl V518))))))))) (let Terms (map (lambda Y (gensym V)) (tl (hd V518))) (let XTerms (shen.rcons_form (shen.remove_modes (tl (hd V518)))) (let Literal (cons unify (cons (shen.cons_form Terms) (cons XTerms ()))) (let Clause (cons (cons (hd (hd V518)) Terms) (cons :- (cons (cons Literal (hd (tl (tl V518)))) ()))) (cons Clause ())))))) (true (shen.f_error shen.head_abstraction))))

(defun shen.complexity_head (V524) (cond ((cons? V524) (shen.safe-product (map (lambda X (shen.complexity X)) (tl V524)))) (true (shen.f_error shen.complexity_head))))

(defun shen.safe-multiply (V527 V528) (* V527 V528))

(defun shen.complexity (V537) (cond ((and (cons? V537) (and (= mode (hd V537)) (and (cons? (tl V537)) (and (cons? (hd (tl V537))) (and (= mode (hd (hd (tl V537)))) (and (cons? (tl (hd (tl V537)))) (and (cons? (tl (tl (hd (tl V537))))) (and (= () (tl (tl (tl (hd (tl V537)))))) (and (cons? (tl (tl V537))) (= () (tl (tl (tl V537))))))))))))) (shen.complexity (hd (tl V537)))) ((and (cons? V537) (and (= mode (hd V537)) (and (cons? (tl V537)) (and (cons? (hd (tl V537))) (and (cons? (tl (tl V537))) (and (= + (hd (tl (tl V537)))) (= () (tl (tl (tl V537)))))))))) (shen.safe-multiply 2 (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V537))) (tl (tl V537))))) (shen.complexity (cons mode (cons (tl (hd (tl V537))) (tl (tl V537)))))))) ((and (cons? V537) (and (= mode (hd V537)) (and (cons? (tl V537)) (and (cons? (hd (tl V537))) (and (cons? (tl (tl V537))) (and (= - (hd (tl (tl V537)))) (= () (tl (tl (tl V537)))))))))) (shen.safe-multiply (shen.complexity (cons mode (cons (hd (hd (tl V537))) (tl (tl V537))))) (shen.complexity (cons mode (cons (tl (hd (tl V537))) (tl (tl V537))))))) ((and (cons? V537) (and (= mode (hd V537)) (and (cons? (tl V537)) (and (cons? (tl (tl V537))) (and (= () (tl (tl (tl V537)))) (variable? (hd (tl V537)))))))) 1) ((and (cons? V537) (and (= mode (hd V537)) (and (cons? (tl V537)) (and (cons? (tl (tl V537))) (and (= + (hd (tl (tl V537)))) (= () (tl (tl (tl V537))))))))) 2) ((and (cons? V537) (and (= mode (hd V537)) (and (cons? (tl V537)) (and (cons? (tl (tl V537))) (and (= - (hd (tl (tl V537)))) (= () (tl (tl (tl V537))))))))) 1) (true (shen.complexity (cons mode (cons V537 (cons + ())))))))

(defun shen.safe-product (V539) (cond ((= () V539) 1) ((cons? V539) (shen.safe-multiply (hd V539) (shen.safe-product (tl V539)))) (true (shen.f_error shen.safe-product))))

(defun shen.s-prolog_literal (V541) (cond ((and (cons? V541) (and (= is (hd V541)) (and (cons? (tl V541)) (and (cons? (tl (tl V541))) (= () (tl (tl (tl V541)))))))) (cons bind (cons (hd (tl V541)) (cons (shen.insert_deref (hd (tl (tl V541)))) ())))) ((and (cons? V541) (and (= when (hd V541)) (and (cons? (tl V541)) (= () (tl (tl V541)))))) (cons fwhen (cons (shen.insert_deref (hd (tl V541))) ()))) ((and (cons? V541) (and (= bind (hd V541)) (and (cons? (tl V541)) (and (cons? (tl (tl V541))) (= () (tl (tl (tl V541)))))))) (cons bind (cons (hd (tl V541)) (cons (shen.insert_lazyderef (hd (tl (tl V541)))) ())))) ((and (cons? V541) (and (= fwhen (hd V541)) (and (cons? (tl V541)) (= () (tl (tl V541)))))) (cons fwhen (cons (shen.insert_lazyderef (hd (tl V541))) ()))) ((cons? V541) V541) (true (shen.f_error shen.s-prolog_literal))))

(defun shen.insert_deref (V543) (cond ((variable? V543) (cons shen.deref (cons V543 (cons ProcessN ())))) ((cons? V543) (cons (shen.insert_deref (hd V543)) (shen.insert_deref (tl V543)))) (true V543)))

(defun shen.insert_lazyderef (V545) (cond ((variable? V545) (cons shen.lazyderef (cons V545 (cons ProcessN ())))) ((cons? V545) (cons (shen.insert_lazyderef (hd V545)) (shen.insert_lazyderef (tl V545)))) (true V545)))

(defun shen.group_clauses (V547) (cond ((= () V547) ()) ((cons? V547) (let Group (shen.collect (lambda X (shen.same_predicate? (hd V547) X)) V547) (let Rest (difference V547 Group) (cons Group (shen.group_clauses Rest))))) (true (shen.f_error shen.group_clauses))))

(defun shen.collect (V552 V553) (cond ((= () V553) ()) ((cons? V553) (if (V552 (hd V553)) (cons (hd V553) (shen.collect V552 (tl V553))) (shen.collect V552 (tl V553)))) (true (shen.f_error shen.collect))))

(defun shen.same_predicate? (V572 V573) (cond ((and (cons? V572) (and (cons? (hd V572)) (and (cons? V573) (cons? (hd V573))))) (= (hd (hd V572)) (hd (hd V573)))) (true (shen.f_error shen.same_predicate?))))

(defun shen.compile_prolog_procedure (V575) (let F (shen.procedure_name V575) (let Shen (shen.clauses-to-shen F V575) Shen)))

(defun shen.procedure_name (V589) (cond ((and (cons? V589) (and (cons? (hd V589)) (cons? (hd (hd V589))))) (hd (hd (hd V589)))) (true (shen.f_error shen.procedure_name))))

(defun shen.clauses-to-shen (V592 V593) (let Linear (map (lambda X (shen.linearise-clause X)) V593) (let Arity (shen.prolog-aritycheck V592 (map (lambda X (head X)) V593)) (let Parameters (shen.parameters Arity) (let AUM_instructions (map (lambda X (shen.aum X Parameters)) Linear) (let Code (shen.catch-cut (shen.nest-disjunct (map (lambda X (shen.aum_to_shen X)) AUM_instructions))) (let ShenDef (cons define (cons V592 (append Parameters (append (cons ProcessN (cons Continuation ())) (cons -> (cons Code ())))))) ShenDef)))))))

(defun shen.catch-cut (V595) (cond ((not (shen.occurs? cut V595)) V595) (true (cons let (cons Throwcontrol (cons (cons shen.catchpoint ()) (cons (cons shen.cutpoint (cons Throwcontrol (cons V595 ()))) ())))))))

(defun shen.catchpoint () (set shen.*catch* (+ 1 (value shen.*catch*))))

(defun shen.cutpoint (V603 V604) (cond ((= V604 V603) false) (true V604)))

(defun shen.nest-disjunct (V606) (cond ((and (cons? V606) (= () (tl V606))) (hd V606)) ((cons? V606) (shen.lisp-or (hd V606) (shen.nest-disjunct (tl V606)))) (true (shen.f_error shen.nest-disjunct))))

(defun shen.lisp-or (V609 V610) (cons let (cons Case (cons V609 (cons (cons if (cons (cons = (cons Case (cons false ()))) (cons V610 (cons Case ())))) ())))))

(defun shen.prolog-aritycheck (V615 V616) (cond ((and (cons? V616) (= () (tl V616))) (- (length (hd V616)) 1)) ((and (cons? V616) (cons? (tl V616))) (if (= (length (hd V616)) (length (hd (tl V616)))) (shen.prolog-aritycheck V615 (tl V616)) (simple-error (cn "arity error in prolog procedure " (shen.app (cons V615 ()) "
" shen.a))))) (true (shen.f_error shen.prolog-aritycheck))))

(defun shen.linearise-clause (V618) (cond ((and (cons? V618) (and (cons? (tl V618)) (and (= :- (hd (tl V618))) (and (cons? (tl (tl V618))) (= () (tl (tl (tl V618)))))))) (let Linear (shen.linearise (cons (hd V618) (tl (tl V618)))) (shen.clause_form Linear))) (true (shen.f_error shen.linearise-clause))))

(defun shen.clause_form (V620) (cond ((and (cons? V620) (and (cons? (tl V620)) (= () (tl (tl V620))))) (cons (shen.explicit_modes (hd V620)) (cons :- (cons (shen.cf_help (hd (tl V620))) ())))) (true (shen.f_error shen.clause_form))))

(defun shen.explicit_modes (V622) (cond ((cons? V622) (cons (hd V622) (map (lambda X (shen.em_help X)) (tl V622)))) (true (shen.f_error shen.explicit_modes))))

(defun shen.em_help (V624) (cond ((and (cons? V624) (and (= mode (hd V624)) (and (cons? (tl V624)) (and (cons? (tl (tl V624))) (= () (tl (tl (tl V624)))))))) V624) (true (cons mode (cons V624 (cons + ()))))))

(defun shen.cf_help (V626) (cond ((and (cons? V626) (and (= where (hd V626)) (and (cons? (tl V626)) (and (cons? (hd (tl V626))) (and (= = (hd (hd (tl V626)))) (and (cons? (tl (hd (tl V626)))) (and (cons? (tl (tl (hd (tl V626))))) (and (= () (tl (tl (tl (hd (tl V626)))))) (and (cons? (tl (tl V626))) (= () (tl (tl (tl V626))))))))))))) (cons (cons (if (value shen.*occurs*) unify! unify) (tl (hd (tl V626)))) (shen.cf_help (hd (tl (tl V626)))))) (true V626)))

(defun occurs-check (V632) (cond ((= + V632) (set shen.*occurs* true)) ((= - V632) (set shen.*occurs* false)) (true (simple-error "occurs-check expects + or -
"))))

(defun shen.aum (V635 V636) (cond ((and (cons? V635) (and (cons? (hd V635)) (and (cons? (tl V635)) (and (= :- (hd (tl V635))) (and (cons? (tl (tl V635))) (= () (tl (tl (tl V635))))))))) (let MuApplication (shen.make_mu_application (cons shen.mu (cons (tl (hd V635)) (cons (shen.continuation_call (tl (hd V635)) (hd (tl (tl V635)))) ()))) V636) (shen.mu_reduction MuApplication +))) (true (shen.f_error shen.aum))))

(defun shen.continuation_call (V639 V640) (let VTerms (cons ProcessN (shen.extract_vars V639)) (let VBody (shen.extract_vars V640) (let Free (remove Throwcontrol (difference VBody VTerms)) (shen.cc_help Free V640)))))

(defun remove (V643 V644) (shen.remove-h V643 V644 ()))

(defun shen.remove-h (V651 V652 V653) (cond ((= () V652) (reverse V653)) ((and (cons? V652) (= (hd V652) V651)) (shen.remove-h (hd V652) (tl V652) V653)) ((cons? V652) (shen.remove-h V651 (tl V652) (cons (hd V652) V653))) (true (shen.f_error shen.remove-h))))

(defun shen.cc_help (V656 V657) (cond ((and (= () V656) (= () V657)) (cons shen.pop (cons shen.the (cons shen.stack ())))) ((= () V657) (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V656 (cons and (cons shen.then (cons (cons shen.pop (cons shen.the (cons shen.stack ()))) ()))))))))) ((= () V656) (cons call (cons shen.the (cons shen.continuation (cons V657 ()))))) (true (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons V656 (cons and (cons shen.then (cons (cons call (cons shen.the (cons shen.continuation (cons V657 ())))) ())))))))))))

(defun shen.make_mu_application (V660 V661) (cond ((and (cons? V660) (and (= shen.mu (hd V660)) (and (cons? (tl V660)) (and (= () (hd (tl V660))) (and (cons? (tl (tl V660))) (and (= () (tl (tl (tl V660)))) (= () V661))))))) (hd (tl (tl V660)))) ((and (cons? V660) (and (= shen.mu (hd V660)) (and (cons? (tl V660)) (and (cons? (hd (tl V660))) (and (cons? (tl (tl V660))) (and (= () (tl (tl (tl V660)))) (cons? V661))))))) (cons (cons shen.mu (cons (hd (hd (tl V660))) (cons (shen.make_mu_application (cons shen.mu (cons (tl (hd (tl V660))) (tl (tl V660)))) (tl V661)) ()))) (cons (hd V661) ()))) (true (shen.f_error shen.make_mu_application))))

(defun shen.mu_reduction (V670 V671) (cond ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (hd (tl (hd V670)))) (and (= mode (hd (hd (tl (hd V670))))) (and (cons? (tl (hd (tl (hd V670))))) (and (cons? (tl (tl (hd (tl (hd V670)))))) (and (= () (tl (tl (tl (hd (tl (hd V670))))))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (= () (tl (tl V670))))))))))))))) (shen.mu_reduction (cons (cons shen.mu (cons (hd (tl (hd (tl (hd V670))))) (tl (tl (hd V670))))) (tl V670)) (hd (tl (tl (hd (tl (hd V670)))))))) ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (and (= () (tl (tl V670))) (= _ (hd (tl (hd V670)))))))))))) (shen.mu_reduction (hd (tl (tl (hd V670)))) V671)) ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (and (= () (tl (tl V670))) (shen.ephemeral_variable? (hd (tl (hd V670))) (hd (tl V670))))))))))) (subst (hd (tl V670)) (hd (tl (hd V670))) (shen.mu_reduction (hd (tl (tl (hd V670)))) V671))) ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (and (= () (tl (tl V670))) (variable? (hd (tl (hd V670)))))))))))) (cons let (cons (hd (tl (hd V670))) (cons shen.be (cons (hd (tl V670)) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V670)))) V671) ()))))))) ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (and (= () (tl (tl V670))) (and (= - V671) (shen.prolog_constant? (hd (tl (hd V670))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V670))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V670))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V670)))) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (and (= () (tl (tl V670))) (and (= + V671) (shen.prolog_constant? (hd (tl (hd V670))))))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V670))))) (cons in (cons (cons if (cons (cons Z (cons is (cons identical (cons shen.to (cons (hd (tl (hd V670))) ()))))) (cons shen.then (cons (shen.mu_reduction (hd (tl (tl (hd V670)))) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (hd (tl (hd V670))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V670)))) +) ())))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (hd (tl (hd V670)))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (and (= () (tl (tl V670))) (= - V671)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V670))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V670)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V670)))) (tl (tl (hd V670))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) -) (cons shen.else (cons shen.failed! ())))))) ())))))))) ((and (cons? V670) (and (cons? (hd V670)) (and (= shen.mu (hd (hd V670))) (and (cons? (tl (hd V670))) (and (cons? (hd (tl (hd V670)))) (and (cons? (tl (tl (hd V670)))) (and (= () (tl (tl (tl (hd V670))))) (and (cons? (tl V670)) (and (= () (tl (tl V670))) (= + V671)))))))))) (let Z (gensym V) (cons let (cons Z (cons shen.be (cons (cons shen.the (cons shen.result (cons shen.of (cons shen.dereferencing (tl V670))))) (cons in (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.non-empty (cons list ()))))) (cons shen.then (cons (shen.mu_reduction (cons (cons shen.mu (cons (hd (hd (tl (hd V670)))) (cons (cons (cons shen.mu (cons (tl (hd (tl (hd V670)))) (tl (tl (hd V670))))) (cons (cons shen.the (cons tail (cons shen.of (cons Z ())))) ())) ()))) (cons (cons shen.the (cons head (cons shen.of (cons Z ())))) ())) +) (cons shen.else (cons (cons if (cons (cons Z (cons is (cons shen.a (cons shen.variable ())))) (cons shen.then (cons (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (shen.extract_vars (hd (tl (hd V670)))) (cons and (cons shen.then (cons (cons bind (cons Z (cons shen.to (cons (shen.rcons_form (shen.remove_modes (hd (tl (hd V670))))) (cons in (cons (shen.mu_reduction (hd (tl (tl (hd V670)))) +) ())))))) ())))))))) (cons shen.else (cons shen.failed! ())))))) ())))))) ())))))))) (true V670)))

(defun shen.rcons_form (V673) (cond ((cons? V673) (cons cons (cons (shen.rcons_form (hd V673)) (cons (shen.rcons_form (tl V673)) ())))) (true V673)))

(defun shen.remove_modes (V675) (cond ((and (cons? V675) (and (= mode (hd V675)) (and (cons? (tl V675)) (and (cons? (tl (tl V675))) (and (= + (hd (tl (tl V675)))) (= () (tl (tl (tl V675))))))))) (shen.remove_modes (hd (tl V675)))) ((and (cons? V675) (and (= mode (hd V675)) (and (cons? (tl V675)) (and (cons? (tl (tl V675))) (and (= - (hd (tl (tl V675)))) (= () (tl (tl (tl V675))))))))) (shen.remove_modes (hd (tl V675)))) ((cons? V675) (cons (shen.remove_modes (hd V675)) (shen.remove_modes (tl V675)))) (true V675)))

(defun shen.ephemeral_variable? (V678 V679) (and (variable? V678) (variable? V679)))

(defun shen.prolog_constant? (V689) (cond ((cons? V689) false) (true true)))

(defun shen.aum_to_shen (V691) (cond ((and (cons? V691) (and (= let (hd V691)) (and (cons? (tl V691)) (and (cons? (tl (tl V691))) (and (= shen.be (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (cons? (tl (tl (tl (tl V691))))) (and (= in (hd (tl (tl (tl (tl V691)))))) (and (cons? (tl (tl (tl (tl (tl V691)))))) (= () (tl (tl (tl (tl (tl (tl V691)))))))))))))))) (cons let (cons (hd (tl V691)) (cons (shen.aum_to_shen (hd (tl (tl (tl V691))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V691))))))) ()))))) ((and (cons? V691) (and (= shen.the (hd V691)) (and (cons? (tl V691)) (and (= shen.result (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.of (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (= shen.dereferencing (hd (tl (tl (tl V691))))) (and (cons? (tl (tl (tl (tl V691))))) (= () (tl (tl (tl (tl (tl V691))))))))))))))) (cons shen.lazyderef (cons (shen.aum_to_shen (hd (tl (tl (tl (tl V691)))))) (cons ProcessN ())))) ((and (cons? V691) (and (= if (hd V691)) (and (cons? (tl V691)) (and (cons? (tl (tl V691))) (and (= shen.then (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (cons? (tl (tl (tl (tl V691))))) (and (= shen.else (hd (tl (tl (tl (tl V691)))))) (and (cons? (tl (tl (tl (tl (tl V691)))))) (= () (tl (tl (tl (tl (tl (tl V691)))))))))))))))) (cons if (cons (shen.aum_to_shen (hd (tl V691))) (cons (shen.aum_to_shen (hd (tl (tl (tl V691))))) (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V691))))))) ()))))) ((and (cons? V691) (and (cons? (tl V691)) (and (= is (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.a (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (= shen.variable (hd (tl (tl (tl V691))))) (= () (tl (tl (tl (tl V691)))))))))))) (cons shen.pvar? (cons (hd V691) ()))) ((and (cons? V691) (and (cons? (tl V691)) (and (= is (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.a (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (= shen.non-empty (hd (tl (tl (tl V691))))) (and (cons? (tl (tl (tl (tl V691))))) (and (= list (hd (tl (tl (tl (tl V691)))))) (= () (tl (tl (tl (tl (tl V691))))))))))))))) (cons cons? (cons (hd V691) ()))) ((and (cons? V691) (and (= shen.rename (hd V691)) (and (cons? (tl V691)) (and (= shen.the (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.variables (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (= in (hd (tl (tl (tl V691))))) (and (cons? (tl (tl (tl (tl V691))))) (and (= () (hd (tl (tl (tl (tl V691)))))) (and (cons? (tl (tl (tl (tl (tl V691)))))) (and (= and (hd (tl (tl (tl (tl (tl V691))))))) (and (cons? (tl (tl (tl (tl (tl (tl V691))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V691)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V691)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V691)))))))))))))))))))))))) (shen.aum_to_shen (hd (tl (tl (tl (tl (tl (tl (tl V691)))))))))) ((and (cons? V691) (and (= shen.rename (hd V691)) (and (cons? (tl V691)) (and (= shen.the (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.variables (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (= in (hd (tl (tl (tl V691))))) (and (cons? (tl (tl (tl (tl V691))))) (and (cons? (hd (tl (tl (tl (tl V691)))))) (and (cons? (tl (tl (tl (tl (tl V691)))))) (and (= and (hd (tl (tl (tl (tl (tl V691))))))) (and (cons? (tl (tl (tl (tl (tl (tl V691))))))) (and (= shen.then (hd (tl (tl (tl (tl (tl (tl V691)))))))) (and (cons? (tl (tl (tl (tl (tl (tl (tl V691)))))))) (= () (tl (tl (tl (tl (tl (tl (tl (tl V691)))))))))))))))))))))))) (cons let (cons (hd (hd (tl (tl (tl (tl V691)))))) (cons (cons shen.newpv (cons ProcessN ())) (cons (shen.aum_to_shen (cons shen.rename (cons shen.the (cons shen.variables (cons in (cons (tl (hd (tl (tl (tl (tl V691)))))) (tl (tl (tl (tl (tl V691))))))))))) ()))))) ((and (cons? V691) (and (= bind (hd V691)) (and (cons? (tl V691)) (and (cons? (tl (tl V691))) (and (= shen.to (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (cons? (tl (tl (tl (tl V691))))) (and (= in (hd (tl (tl (tl (tl V691)))))) (and (cons? (tl (tl (tl (tl (tl V691)))))) (= () (tl (tl (tl (tl (tl (tl V691)))))))))))))))) (cons do (cons (cons shen.bindv (cons (hd (tl V691)) (cons (shen.chwild (hd (tl (tl (tl V691))))) (cons ProcessN ())))) (cons (cons let (cons Result (cons (shen.aum_to_shen (hd (tl (tl (tl (tl (tl V691))))))) (cons (cons do (cons (cons shen.unbindv (cons (hd (tl V691)) (cons ProcessN ()))) (cons Result ()))) ())))) ())))) ((and (cons? V691) (and (cons? (tl V691)) (and (= is (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= identical (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (and (= shen.to (hd (tl (tl (tl V691))))) (and (cons? (tl (tl (tl (tl V691))))) (= () (tl (tl (tl (tl (tl V691)))))))))))))) (cons = (cons (hd (tl (tl (tl (tl V691))))) (cons (hd V691) ())))) ((= shen.failed! V691) false) ((and (cons? V691) (and (= shen.the (hd V691)) (and (cons? (tl V691)) (and (= head (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.of (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (= () (tl (tl (tl (tl V691)))))))))))) (cons hd (tl (tl (tl V691))))) ((and (cons? V691) (and (= shen.the (hd V691)) (and (cons? (tl V691)) (and (= tail (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.of (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (= () (tl (tl (tl (tl V691)))))))))))) (cons tl (tl (tl (tl V691))))) ((and (cons? V691) (and (= shen.pop (hd V691)) (and (cons? (tl V691)) (and (= shen.the (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.stack (hd (tl (tl V691)))) (= () (tl (tl (tl V691)))))))))) (cons do (cons (cons shen.incinfs ()) (cons (cons thaw (cons Continuation ())) ())))) ((and (cons? V691) (and (= call (hd V691)) (and (cons? (tl V691)) (and (= shen.the (hd (tl V691))) (and (cons? (tl (tl V691))) (and (= shen.continuation (hd (tl (tl V691)))) (and (cons? (tl (tl (tl V691)))) (= () (tl (tl (tl (tl V691)))))))))))) (cons do (cons (cons shen.incinfs ()) (cons (shen.call_the_continuation (shen.chwild (hd (tl (tl (tl V691))))) ProcessN Continuation) ())))) (true V691)))

(defun shen.chwild (V693) (cond ((= V693 _) (cons shen.newpv (cons ProcessN ()))) ((cons? V693) (map (lambda Z (shen.chwild Z)) V693)) (true V693)))

(defun shen.newpv (V695) (let Count+1 (+ (<-address (value shen.*varcounter*) V695) 1) (let IncVar (address-> (value shen.*varcounter*) V695 Count+1) (let Vector (<-address (value shen.*prologvectors*) V695) (let ResizeVectorIfNeeded (if (= Count+1 (limit Vector)) (shen.resizeprocessvector V695 Count+1) shen.skip) (shen.mk-pvar Count+1))))))

(defun shen.resizeprocessvector (V698 V699) (let Vector (<-address (value shen.*prologvectors*) V698) (let BigVector (shen.resize-vector Vector (+ V699 V699) shen.-null-) (address-> (value shen.*prologvectors*) V698 BigVector))))

(defun shen.resize-vector (V703 V704 V705) (let BigVector (address-> (absvector (+ 1 V704)) 0 V704) (shen.copy-vector V703 BigVector (limit V703) V704 V705)))

(defun shen.copy-vector (V711 V712 V713 V714 V715) (shen.copy-vector-stage-2 (+ 1 V713) (+ V714 1) V715 (shen.copy-vector-stage-1 1 V711 V712 (+ 1 V713))))

(defun shen.copy-vector-stage-1 (V723 V724 V725 V726) (cond ((= V726 V723) V725) (true (shen.copy-vector-stage-1 (+ 1 V723) V724 (address-> V725 V723 (<-address V724 V723)) V726))))

(defun shen.copy-vector-stage-2 (V734 V735 V736 V737) (cond ((= V735 V734) V737) (true (shen.copy-vector-stage-2 (+ V734 1) V735 V736 (address-> V737 V734 V736)))))

(defun shen.mk-pvar (V739) (address-> (address-> (absvector 2) 0 shen.pvar) 1 V739))

(defun shen.pvar? (V741) (and (absvector? V741) (= (<-address/or V741 0 (freeze shen.not-pvar)) shen.pvar)))

(defun shen.bindv (V745 V746 V747) (let Vector (<-address (value shen.*prologvectors*) V747) (address-> Vector (<-address V745 1) V746)))

(defun shen.unbindv (V750 V751) (let Vector (<-address (value shen.*prologvectors*) V751) (address-> Vector (<-address V750 1) shen.-null-)))

(defun shen.incinfs () (set shen.*infs* (+ 1 (value shen.*infs*))))

(defun shen.call_the_continuation (V755 V756 V757) (cond ((and (cons? V755) (and (cons? (hd V755)) (= () (tl V755)))) (cons (hd (hd V755)) (append (tl (hd V755)) (cons V756 (cons V757 ()))))) ((and (cons? V755) (cons? (hd V755))) (let NewContinuation (shen.newcontinuation (tl V755) V756 V757) (cons (hd (hd V755)) (append (tl (hd V755)) (cons V756 (cons NewContinuation ())))))) (true (shen.f_error shen.call_the_continuation))))

(defun shen.newcontinuation (V761 V762 V763) (cond ((= () V761) V763) ((and (cons? V761) (cons? (hd V761))) (cons freeze (cons (cons (hd (hd V761)) (append (tl (hd V761)) (cons V762 (cons (shen.newcontinuation (tl V761) V762 V763) ())))) ()))) (true (shen.f_error shen.newcontinuation))))

(defun return (V771 V772 V773) (shen.deref V771 V772))

(defun shen.measure&return (V781 V782 V783) (do (shen.prhush (shen.app (value shen.*infs*) " inferences
" shen.a) (stoutput)) (shen.deref V781 V782)))

(defun unify (V788 V789 V790 V791) (shen.lzy= (shen.lazyderef V788 V790) (shen.lazyderef V789 V790) V790 V791))

(defun shen.lzy= (V813 V814 V815 V816) (cond ((= V814 V813) (thaw V816)) ((shen.pvar? V813) (bind V813 V814 V815 V816)) ((shen.pvar? V814) (bind V814 V813 V815 V816)) ((and (cons? V813) (cons? V814)) (shen.lzy= (shen.lazyderef (hd V813) V815) (shen.lazyderef (hd V814) V815) V815 (freeze (shen.lzy= (shen.lazyderef (tl V813) V815) (shen.lazyderef (tl V814) V815) V815 V816)))) (true false)))

(defun shen.deref (V819 V820) (cond ((cons? V819) (cons (shen.deref (hd V819) V820) (shen.deref (tl V819) V820))) (true (if (shen.pvar? V819) (let Value (shen.valvector V819 V820) (if (= Value shen.-null-) V819 (shen.deref Value V820))) V819))))

(defun shen.lazyderef (V823 V824) (if (shen.pvar? V823) (let Value (shen.valvector V823 V824) (if (= Value shen.-null-) V823 (shen.lazyderef Value V824))) V823))

(defun shen.valvector (V827 V828) (<-address (<-address (value shen.*prologvectors*) V828) (<-address V827 1)))

(defun unify! (V833 V834 V835 V836) (shen.lzy=! (shen.lazyderef V833 V835) (shen.lazyderef V834 V835) V835 V836))

(defun shen.lzy=! (V858 V859 V860 V861) (cond ((= V859 V858) (thaw V861)) ((and (shen.pvar? V858) (not (shen.occurs? V858 (shen.deref V859 V860)))) (bind V858 V859 V860 V861)) ((and (shen.pvar? V859) (not (shen.occurs? V859 (shen.deref V858 V860)))) (bind V859 V858 V860 V861)) ((and (cons? V858) (cons? V859)) (shen.lzy=! (shen.lazyderef (hd V858) V860) (shen.lazyderef (hd V859) V860) V860 (freeze (shen.lzy=! (shen.lazyderef (tl V858) V860) (shen.lazyderef (tl V859) V860) V860 V861)))) (true false)))

(defun shen.occurs? (V873 V874) (cond ((= V874 V873) true) ((cons? V874) (or (shen.occurs? V873 (hd V874)) (shen.occurs? V873 (tl V874)))) (true false)))

(defun identical (V879 V880 V881 V882) (shen.lzy== (shen.lazyderef V879 V881) (shen.lazyderef V880 V881) V881 V882))

(defun shen.lzy== (V904 V905 V906 V907) (cond ((= V905 V904) (thaw V907)) ((and (cons? V904) (cons? V905)) (shen.lzy== (shen.lazyderef (hd V904) V906) (shen.lazyderef (hd V905) V906) V906 (freeze (shen.lzy== (tl V904) (tl V905) V906 V907)))) (true false)))

(defun shen.pvar (V909) (cn "Var" (shen.app (<-address V909 1) "" shen.a)))

(defun bind (V914 V915 V916 V917) (do (shen.bindv V914 V915 V916) (let Result (thaw V917) (do (shen.unbindv V914 V916) Result))))

(defun fwhen (V935 V936 V937) (cond ((= true V935) (thaw V937)) ((= false V935) false) (true (simple-error (cn "fwhen expects a boolean: not " (shen.app V935 "%" shen.s))))))

(defun call (V953 V954 V955) (cond ((cons? V953) (shen.call-help (function (shen.lazyderef (hd V953) V954)) (tl V953) V954 V955)) (true false)))

(defun shen.call-help (V960 V961 V962 V963) (cond ((= () V961) (V960 V962 V963)) ((cons? V961) (shen.call-help (V960 (hd V961)) (tl V961) V962 V963)) (true (shen.f_error shen.call-help))))

(defun shen.intprolog (V965) (cond ((and (cons? V965) (cons? (hd V965))) (let ProcessN (shen.start-new-prolog-process) (shen.intprolog-help (hd (hd V965)) (shen.insert-prolog-variables (cons (tl (hd V965)) (cons (tl V965) ())) ProcessN) ProcessN))) (true (shen.f_error shen.intprolog))))

(defun shen.intprolog-help (V969 V970 V971) (cond ((and (cons? V970) (and (cons? (tl V970)) (= () (tl (tl V970))))) (shen.intprolog-help-help V969 (hd V970) (hd (tl V970)) V971)) (true (shen.f_error shen.intprolog-help))))

(defun shen.intprolog-help-help (V976 V977 V978 V979) (cond ((= () V977) (V976 V979 (freeze (shen.call-rest V978 V979)))) ((cons? V977) (shen.intprolog-help-help (V976 (hd V977)) (tl V977) V978 V979)) (true (shen.f_error shen.intprolog-help-help))))

(defun shen.call-rest (V984 V985) (cond ((= () V984) true) ((and (cons? V984) (and (cons? (hd V984)) (cons? (tl (hd V984))))) (shen.call-rest (cons (cons ((hd (hd V984)) (hd (tl (hd V984)))) (tl (tl (hd V984)))) (tl V984)) V985)) ((and (cons? V984) (and (cons? (hd V984)) (= () (tl (hd V984))))) ((hd (hd V984)) V985 (freeze (shen.call-rest (tl V984) V985)))) (true (shen.f_error shen.call-rest))))

(defun shen.start-new-prolog-process () (let IncrementProcessCounter (set shen.*process-counter* (+ 1 (value shen.*process-counter*))) (shen.initialise-prolog IncrementProcessCounter)))

(defun shen.insert-prolog-variables (V988 V989) (shen.insert-prolog-variables-help V988 (shen.flatten V988) V989))

(defun shen.insert-prolog-variables-help (V997 V998 V999) (cond ((= () V998) V997) ((and (cons? V998) (variable? (hd V998))) (let V (shen.newpv V999) (let XV/Y (subst V (hd V998) V997) (let Z-Y (remove (hd V998) (tl V998)) (shen.insert-prolog-variables-help XV/Y Z-Y V999))))) ((cons? V998) (shen.insert-prolog-variables-help V997 (tl V998) V999)) (true (shen.f_error shen.insert-prolog-variables-help))))

(defun shen.initialise-prolog (V1001) (let Vector (address-> (value shen.*prologvectors*) V1001 (shen.fillvector (vector 10) 1 10 shen.-null-)) (let Counter (address-> (value shen.*varcounter*) V1001 1) V1001)))




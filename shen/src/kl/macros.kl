"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun macroexpand (V365) (let Y (shen.compose (value *macros*) V365) (if (= V365 Y) V365 (shen.walk (lambda Z (macroexpand Z)) Y))))

(defun shen.error-macro (V367) (cond ((and (cons? V367) (and (= error (hd V367)) (cons? (tl V367)))) (cons simple-error (cons (shen.mkstr (hd (tl V367)) (tl (tl V367))) ()))) (true V367)))

(defun shen.output-macro (V369) (cond ((and (cons? V369) (and (= output (hd V369)) (cons? (tl V369)))) (cons shen.prhush (cons (shen.mkstr (hd (tl V369)) (tl (tl V369))) (cons (cons stoutput ()) ())))) ((and (cons? V369) (and (= pr (hd V369)) (and (cons? (tl V369)) (= () (tl (tl V369)))))) (cons pr (cons (hd (tl V369)) (cons (cons stoutput ()) ())))) (true V369)))

(defun shen.make-string-macro (V371) (cond ((and (cons? V371) (and (= make-string (hd V371)) (cons? (tl V371)))) (shen.mkstr (hd (tl V371)) (tl (tl V371)))) (true V371)))

(defun shen.input-macro (V373) (cond ((and (cons? V373) (and (= lineread (hd V373)) (= () (tl V373)))) (cons lineread (cons (cons stinput ()) ()))) ((and (cons? V373) (and (= input (hd V373)) (= () (tl V373)))) (cons input (cons (cons stinput ()) ()))) ((and (cons? V373) (and (= read (hd V373)) (= () (tl V373)))) (cons read (cons (cons stinput ()) ()))) ((and (cons? V373) (and (= input+ (hd V373)) (and (cons? (tl V373)) (= () (tl (tl V373)))))) (cons input+ (cons (hd (tl V373)) (cons (cons stinput ()) ())))) ((and (cons? V373) (and (= read-byte (hd V373)) (= () (tl V373)))) (cons read-byte (cons (cons stinput ()) ()))) ((and (cons? V373) (and (= read-char-code (hd V373)) (= () (tl V373)))) (cons read-char-code (cons (cons stinput ()) ()))) (true V373)))

(defun shen.compose (V376 V377) (cond ((= () V376) V377) ((cons? V376) (shen.compose (tl V376) ((hd V376) V377))) (true (shen.f_error shen.compose))))

(defun shen.compile-macro (V379) (cond ((and (cons? V379) (and (= compile (hd V379)) (and (cons? (tl V379)) (and (cons? (tl (tl V379))) (= () (tl (tl (tl V379)))))))) (cons compile (cons (hd (tl V379)) (cons (hd (tl (tl V379))) (cons (cons lambda (cons E (cons (cons if (cons (cons cons? (cons E ())) (cons (cons error (cons "parse error here: ~S~%" (cons E ()))) (cons (cons error (cons "parse error~%" ())) ())))) ()))) ()))))) (true V379)))

(defun shen.prolog-macro (V381) (cond ((and (cons? V381) (= prolog? (hd V381))) (let F (gensym shen.f) (let Receive (shen.receive-terms (tl V381)) (let PrologDef (eval (append (cons defprolog (cons F ())) (append Receive (append (cons <-- ()) (append (shen.pass-literals (tl V381)) (cons ; ())))))) (let Query (cons F (append Receive (cons (cons shen.start-new-prolog-process ()) (cons (cons freeze (cons true ())) ())))) Query))))) (true V381)))

(defun shen.receive-terms (V387) (cond ((= () V387) ()) ((and (cons? V387) (and (cons? (hd V387)) (and (= receive (hd (hd V387))) (and (cons? (tl (hd V387))) (= () (tl (tl (hd V387)))))))) (cons (hd (tl (hd V387))) (shen.receive-terms (tl V387)))) ((cons? V387) (shen.receive-terms (tl V387))) (true (shen.f_error shen.receive-terms))))

(defun shen.pass-literals (V391) (cond ((= () V391) ()) ((and (cons? V391) (and (cons? (hd V391)) (and (= receive (hd (hd V391))) (and (cons? (tl (hd V391))) (= () (tl (tl (hd V391)))))))) (shen.pass-literals (tl V391))) ((cons? V391) (cons (hd V391) (shen.pass-literals (tl V391)))) (true (shen.f_error shen.pass-literals))))

(defun shen.defprolog-macro (V393) (cond ((and (cons? V393) (and (= defprolog (hd V393)) (cons? (tl V393)))) (compile (lambda Y (shen.<defprolog> Y)) (tl V393) (lambda Y (shen.prolog-error (hd (tl V393)) Y)))) (true V393)))

(defun shen.datatype-macro (V395) (cond ((and (cons? V395) (and (= datatype (hd V395)) (cons? (tl V395)))) (cons shen.process-datatype (cons (shen.intern-type (hd (tl V395))) (cons (cons compile (cons (cons lambda (cons X (cons (cons shen.<datatype-rules> (cons X ())) ()))) (cons (shen.rcons_form (tl (tl V395))) (cons (cons function (cons shen.datatype-error ())) ())))) ())))) (true V395)))

(defun shen.intern-type (V397) (intern (cn "type#" (str V397))))

(defun shen.@s-macro (V399) (cond ((and (cons? V399) (and (= @s (hd V399)) (and (cons? (tl V399)) (and (cons? (tl (tl V399))) (cons? (tl (tl (tl V399)))))))) (cons @s (cons (hd (tl V399)) (cons (shen.@s-macro (cons @s (tl (tl V399)))) ())))) ((and (cons? V399) (and (= @s (hd V399)) (and (cons? (tl V399)) (and (cons? (tl (tl V399))) (and (= () (tl (tl (tl V399)))) (string? (hd (tl V399)))))))) (let E (explode (hd (tl V399))) (if (> (length E) 1) (shen.@s-macro (cons @s (append E (tl (tl V399))))) V399))) (true V399)))

(defun shen.synonyms-macro (V401) (cond ((and (cons? V401) (= synonyms (hd V401))) (cons shen.synonyms-help (cons (shen.rcons_form (shen.curry-synonyms (tl V401))) ()))) (true V401)))

(defun shen.curry-synonyms (V403) (map (lambda X (shen.curry-type X)) V403))

(defun shen.nl-macro (V405) (cond ((and (cons? V405) (and (= nl (hd V405)) (= () (tl V405)))) (cons nl (cons 1 ()))) (true V405)))

(defun shen.assoc-macro (V407) (cond ((and (cons? V407) (and (cons? (tl V407)) (and (cons? (tl (tl V407))) (and (cons? (tl (tl (tl V407)))) (element? (hd V407) (cons @p (cons @v (cons append (cons and (cons or (cons + (cons * (cons do ()))))))))))))) (cons (hd V407) (cons (hd (tl V407)) (cons (shen.assoc-macro (cons (hd V407) (tl (tl V407)))) ())))) (true V407)))

(defun shen.let-macro (V409) (cond ((and (cons? V409) (and (= let (hd V409)) (and (cons? (tl V409)) (and (cons? (tl (tl V409))) (and (cons? (tl (tl (tl V409)))) (cons? (tl (tl (tl (tl V409)))))))))) (cons let (cons (hd (tl V409)) (cons (hd (tl (tl V409))) (cons (shen.let-macro (cons let (tl (tl (tl V409))))) ()))))) (true V409)))

(defun shen.abs-macro (V411) (cond ((and (cons? V411) (and (= /. (hd V411)) (and (cons? (tl V411)) (and (cons? (tl (tl V411))) (cons? (tl (tl (tl V411)))))))) (cons lambda (cons (hd (tl V411)) (cons (shen.abs-macro (cons /. (tl (tl V411)))) ())))) ((and (cons? V411) (and (= /. (hd V411)) (and (cons? (tl V411)) (and (cons? (tl (tl V411))) (= () (tl (tl (tl V411)))))))) (cons lambda (tl V411))) (true V411)))

(defun shen.cases-macro (V415) (cond ((and (cons? V415) (and (= cases (hd V415)) (and (cons? (tl V415)) (and (= true (hd (tl V415))) (cons? (tl (tl V415))))))) (hd (tl (tl V415)))) ((and (cons? V415) (and (= cases (hd V415)) (and (cons? (tl V415)) (and (cons? (tl (tl V415))) (= () (tl (tl (tl V415)))))))) (cons if (cons (hd (tl V415)) (cons (hd (tl (tl V415))) (cons (cons simple-error (cons "error: cases exhausted" ())) ()))))) ((and (cons? V415) (and (= cases (hd V415)) (and (cons? (tl V415)) (cons? (tl (tl V415)))))) (cons if (cons (hd (tl V415)) (cons (hd (tl (tl V415))) (cons (shen.cases-macro (cons cases (tl (tl (tl V415))))) ()))))) ((and (cons? V415) (and (= cases (hd V415)) (and (cons? (tl V415)) (= () (tl (tl V415)))))) (simple-error "error: odd number of case elements
")) (true V415)))

(defun shen.timer-macro (V417) (cond ((and (cons? V417) (and (= time (hd V417)) (and (cons? (tl V417)) (= () (tl (tl V417)))))) (shen.let-macro (cons let (cons Start (cons (cons get-time (cons run ())) (cons Result (cons (hd (tl V417)) (cons Finish (cons (cons get-time (cons run ())) (cons Time (cons (cons - (cons Finish (cons Start ()))) (cons Message (cons (cons shen.prhush (cons (cons cn (cons "
run time: " (cons (cons cn (cons (cons str (cons Time ())) (cons " secs
" ()))) ()))) (cons (cons stoutput ()) ()))) (cons Result ())))))))))))))) (true V417)))

(defun shen.tuple-up (V419) (cond ((cons? V419) (cons @p (cons (hd V419) (cons (shen.tuple-up (tl V419)) ())))) (true V419)))

(defun shen.put/get-macro (V421) (cond ((and (cons? V421) (and (= put (hd V421)) (and (cons? (tl V421)) (and (cons? (tl (tl V421))) (and (cons? (tl (tl (tl V421)))) (= () (tl (tl (tl (tl V421)))))))))) (cons put (cons (hd (tl V421)) (cons (hd (tl (tl V421))) (cons (hd (tl (tl (tl V421)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V421) (and (= get (hd V421)) (and (cons? (tl V421)) (and (cons? (tl (tl V421))) (= () (tl (tl (tl V421)))))))) (cons get (cons (hd (tl V421)) (cons (hd (tl (tl V421))) (cons (cons value (cons *property-vector* ())) ()))))) ((and (cons? V421) (and (= get/or (hd V421)) (and (cons? (tl V421)) (and (cons? (tl (tl V421))) (and (cons? (tl (tl (tl V421)))) (= () (tl (tl (tl (tl V421)))))))))) (cons get/or (cons (hd (tl V421)) (cons (hd (tl (tl V421))) (cons (hd (tl (tl (tl V421)))) (cons (cons value (cons *property-vector* ())) ())))))) ((and (cons? V421) (and (= unput (hd V421)) (and (cons? (tl V421)) (and (cons? (tl (tl V421))) (= () (tl (tl (tl V421)))))))) (cons unput (cons (hd (tl V421)) (cons (hd (tl (tl V421))) (cons (cons value (cons *property-vector* ())) ()))))) (true V421)))

(defun shen.function-macro (V423) (cond ((and (cons? V423) (and (= function (hd V423)) (and (cons? (tl V423)) (= () (tl (tl V423)))))) (shen.function-abstraction (hd (tl V423)) (arity (hd (tl V423))))) (true V423)))

(defun shen.function-abstraction (V426 V427) (cond ((= 0 V427) (simple-error (shen.app V426 " has no lambda form
" shen.a))) ((= -1 V427) (cons function (cons V426 ()))) (true (shen.function-abstraction-help V426 V427 ()))))

(defun shen.function-abstraction-help (V431 V432 V433) (cond ((= 0 V432) (cons V431 V433)) (true (let X (gensym V) (cons /. (cons X (cons (shen.function-abstraction-help V431 (- V432 1) (append V433 (cons X ()))) ())))))))

(defun undefmacro (V435) (let MacroReg (value shen.*macroreg*) (let Pos (shen.findpos V435 MacroReg) (let Remove1 (set shen.*macroreg* (remove V435 MacroReg)) (let Remove2 (set *macros* (shen.remove-nth Pos (value *macros*))) V435)))))

(defun shen.findpos (V445 V446) (cond ((= () V446) (simple-error (shen.app V445 " is not a macro
" shen.a))) ((and (cons? V446) (= (hd V446) V445)) 1) ((cons? V446) (+ 1 (shen.findpos V445 (tl V446)))) (true (shen.f_error shen.findpos))))

(defun shen.remove-nth (V451 V452) (cond ((and (= 1 V451) (cons? V452)) (tl V452)) ((cons? V452) (cons (hd V452) (shen.remove-nth (- V451 1) (tl V452)))) (true (shen.f_error shen.remove-nth))))




"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.yacc (V2984) (cond ((and (cons? V2984) (and (= defcc (hd V2984)) (cons? (tl V2984)))) (shen.yacc->shen (hd (tl V2984)) (tl (tl V2984)))) (true (shen.f_error shen.yacc))))

(defun shen.yacc->shen (V2987 V2988) (let CCRules (shen.split_cc_rules true V2988 ()) (let CCBody (map (lambda X (shen.cc_body X)) CCRules) (let YaccCases (shen.yacc_cases CCBody) (cons define (cons V2987 (cons Stream (cons -> (cons (shen.kill-code YaccCases) ())))))))))

(defun shen.kill-code (V2990) (cond ((> (occurrences kill V2990) 0) (cons trap-error (cons V2990 (cons (cons lambda (cons E (cons (cons shen.analyse-kill (cons E ())) ()))) ())))) (true V2990)))

(defun kill () (simple-error "yacc kill"))

(defun shen.analyse-kill (V2992) (let String (error-to-string V2992) (if (= String "yacc kill") (fail) V2992)))

(defun shen.split_cc_rules (V2998 V2999 V3000) (cond ((and (= () V2999) (= () V3000)) ()) ((= () V2999) (cons (shen.split_cc_rule V2998 (reverse V3000) ()) ())) ((and (cons? V2999) (= ; (hd V2999))) (cons (shen.split_cc_rule V2998 (reverse V3000) ()) (shen.split_cc_rules V2998 (tl V2999) ()))) ((cons? V2999) (shen.split_cc_rules V2998 (tl V2999) (cons (hd V2999) V3000))) (true (shen.f_error shen.split_cc_rules))))

(defun shen.split_cc_rule (V3008 V3009 V3010) (cond ((and (cons? V3009) (and (= := (hd V3009)) (and (cons? (tl V3009)) (= () (tl (tl V3009)))))) (cons (reverse V3010) (tl V3009))) ((and (cons? V3009) (and (= := (hd V3009)) (and (cons? (tl V3009)) (and (cons? (tl (tl V3009))) (and (= where (hd (tl (tl V3009)))) (and (cons? (tl (tl (tl V3009)))) (= () (tl (tl (tl (tl V3009))))))))))) (cons (reverse V3010) (cons (cons where (cons (hd (tl (tl (tl V3009)))) (cons (hd (tl V3009)) ()))) ()))) ((= () V3009) (do (shen.semantic-completion-warning V3008 V3010) (shen.split_cc_rule V3008 (cons := (cons (shen.default_semantics (reverse V3010)) ())) V3010))) ((cons? V3009) (shen.split_cc_rule V3008 (tl V3009) (cons (hd V3009) V3010))) (true (shen.f_error shen.split_cc_rule))))

(defun shen.semantic-completion-warning (V3021 V3022) (cond ((= true V3021) (do (shen.prhush "warning: " (stoutput)) (do (for-each (lambda X (shen.prhush (shen.app X " " shen.a) (stoutput))) (reverse V3022)) (shen.prhush "has no semantics.
" (stoutput))))) (true shen.skip)))

(defun shen.default_semantics (V3024) (cond ((= () V3024) ()) ((and (cons? V3024) (and (= () (tl V3024)) (shen.grammar_symbol? (hd V3024)))) (hd V3024)) ((and (cons? V3024) (shen.grammar_symbol? (hd V3024))) (cons append (cons (hd V3024) (cons (shen.default_semantics (tl V3024)) ())))) ((cons? V3024) (cons cons (cons (hd V3024) (cons (shen.default_semantics (tl V3024)) ())))) (true (shen.f_error shen.default_semantics))))

(defun shen.grammar_symbol? (V3026) (and (symbol? V3026) (let Cs (shen.strip-pathname (explode V3026)) (and (= (hd Cs) "<") (= (hd (reverse Cs)) ">")))))

(defun shen.yacc_cases (V3028) (cond ((and (cons? V3028) (= () (tl V3028))) (hd V3028)) ((cons? V3028) (let P YaccParse (cons let (cons P (cons (hd V3028) (cons (cons if (cons (cons = (cons P (cons (cons fail ()) ()))) (cons (shen.yacc_cases (tl V3028)) (cons P ())))) ())))))) (true (shen.f_error shen.yacc_cases))))

(defun shen.cc_body (V3030) (cond ((and (cons? V3030) (and (cons? (tl V3030)) (= () (tl (tl V3030))))) (shen.syntax (hd V3030) Stream (hd (tl V3030)))) (true (shen.f_error shen.cc_body))))

(defun shen.syntax (V3034 V3035 V3036) (cond ((and (= () V3034) (and (cons? V3036) (and (= where (hd V3036)) (and (cons? (tl V3036)) (and (cons? (tl (tl V3036))) (= () (tl (tl (tl V3036))))))))) (cons if (cons (shen.semantics (hd (tl V3036))) (cons (cons shen.pair (cons (cons hd (cons V3035 ())) (cons (shen.semantics (hd (tl (tl V3036)))) ()))) (cons (cons fail ()) ()))))) ((= () V3034) (cons shen.pair (cons (cons hd (cons V3035 ())) (cons (shen.semantics V3036) ())))) ((cons? V3034) (if (shen.grammar_symbol? (hd V3034)) (shen.recursive_descent V3034 V3035 V3036) (if (variable? (hd V3034)) (shen.variable-match V3034 V3035 V3036) (if (shen.jump_stream? (hd V3034)) (shen.jump_stream V3034 V3035 V3036) (if (shen.terminal? (hd V3034)) (shen.check_stream V3034 V3035 V3036) (if (cons? (hd V3034)) (shen.list-stream (shen.decons (hd V3034)) (tl V3034) V3035 V3036) (simple-error (shen.app (hd V3034) " is not legal syntax
" shen.a)))))))) (true (shen.f_error shen.syntax))))

(defun shen.list-stream (V3041 V3042 V3043 V3044) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V3043 ())) ())) (cons (cons cons? (cons (cons hd (cons (cons hd (cons V3043 ())) ())) ())) ()))) (let Placeholder (gensym shen.place) (let RunOn (shen.syntax V3042 (cons shen.pair (cons (cons tl (cons (cons hd (cons V3043 ())) ())) (cons (cons hd (cons (cons tl (cons V3043 ())) ())) ()))) V3044) (let Action (shen.insert-runon RunOn Placeholder (shen.syntax V3041 (cons shen.pair (cons (cons hd (cons (cons hd (cons V3043 ())) ())) (cons (cons hd (cons (cons tl (cons V3043 ())) ())) ()))) Placeholder)) (cons if (cons Test (cons Action (cons (cons fail ()) ())))))))))

(defun shen.decons (V3046) (cond ((and (cons? V3046) (and (= cons (hd V3046)) (and (cons? (tl V3046)) (and (cons? (tl (tl V3046))) (and (= () (hd (tl (tl V3046)))) (= () (tl (tl (tl V3046))))))))) (cons (hd (tl V3046)) ())) ((and (cons? V3046) (and (= cons (hd V3046)) (and (cons? (tl V3046)) (and (cons? (tl (tl V3046))) (= () (tl (tl (tl V3046)))))))) (cons (hd (tl V3046)) (shen.decons (hd (tl (tl V3046)))))) (true V3046)))

(defun shen.insert-runon (V3061 V3062 V3063) (cond ((and (cons? V3063) (and (= shen.pair (hd V3063)) (and (cons? (tl V3063)) (and (cons? (tl (tl V3063))) (and (= () (tl (tl (tl V3063)))) (= (hd (tl (tl V3063))) V3062)))))) V3061) ((cons? V3063) (map (lambda Z (shen.insert-runon V3061 V3062 Z)) V3063)) (true V3063)))

(defun shen.strip-pathname (V3069) (cond ((not (element? "." V3069)) V3069) ((cons? V3069) (shen.strip-pathname (tl V3069))) (true (shen.f_error shen.strip-pathname))))

(defun shen.recursive_descent (V3073 V3074 V3075) (cond ((cons? V3073) (let Test (cons (hd V3073) (cons V3074 ())) (let Action (shen.syntax (tl V3073) (concat Parse_ (hd V3073)) V3075) (let Else (cons fail ()) (cons let (cons (concat Parse_ (hd V3073)) (cons Test (cons (cons if (cons (cons not (cons (cons = (cons (cons fail ()) (cons (concat Parse_ (hd V3073)) ()))) ())) (cons Action (cons Else ())))) ())))))))) (true (shen.f_error shen.recursive_descent))))

(defun shen.variable-match (V3079 V3080 V3081) (cond ((cons? V3079) (let Test (cons cons? (cons (cons hd (cons V3080 ())) ())) (let Action (cons let (cons (concat Parse_ (hd V3079)) (cons (cons hd (cons (cons hd (cons V3080 ())) ())) (cons (shen.syntax (tl V3079) (cons shen.pair (cons (cons tl (cons (cons hd (cons V3080 ())) ())) (cons (cons shen.hdtl (cons V3080 ())) ()))) V3081) ())))) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.variable-match))))

(defun shen.terminal? (V3091) (cond ((cons? V3091) false) ((variable? V3091) false) (true true)))

(defun shen.jump_stream? (V3097) (cond ((= V3097 _) true) (true false)))

(defun shen.check_stream (V3101 V3102 V3103) (cond ((cons? V3101) (let Test (cons and (cons (cons cons? (cons (cons hd (cons V3102 ())) ())) (cons (cons = (cons (hd V3101) (cons (cons hd (cons (cons hd (cons V3102 ())) ())) ()))) ()))) (let Action (shen.syntax (tl V3101) (cons shen.pair (cons (cons tl (cons (cons hd (cons V3102 ())) ())) (cons (cons shen.hdtl (cons V3102 ())) ()))) V3103) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.check_stream))))

(defun shen.jump_stream (V3107 V3108 V3109) (cond ((cons? V3107) (let Test (cons cons? (cons (cons hd (cons V3108 ())) ())) (let Action (shen.syntax (tl V3107) (cons shen.pair (cons (cons tl (cons (cons hd (cons V3108 ())) ())) (cons (cons shen.hdtl (cons V3108 ())) ()))) V3109) (let Else (cons fail ()) (cons if (cons Test (cons Action (cons Else ())))))))) (true (shen.f_error shen.jump_stream))))

(defun shen.semantics (V3111) (cond ((= () V3111) ()) ((shen.grammar_symbol? V3111) (cons shen.hdtl (cons (concat Parse_ V3111) ()))) ((variable? V3111) (concat Parse_ V3111)) ((cons? V3111) (map (lambda Z (shen.semantics Z)) V3111)) (true V3111)))

(defun shen.snd-or-fail (V3119) (cond ((and (cons? V3119) (and (cons? (tl V3119)) (= () (tl (tl V3119))))) (hd (tl V3119))) (true (fail))))

(defun fail () shen.fail!)(defun shen.pair (V3122 V3123) (cons V3122 (cons V3123 ())))

(defun shen.hdtl (V3125) (hd (tl V3125)))

(defun <!> (V3133) (cond ((and (cons? V3133) (and (cons? (tl V3133)) (= () (tl (tl V3133))))) (cons () (cons (hd V3133) ()))) (true (fail))))

(defun <e> (V3139) (cond ((and (cons? V3139) (and (cons? (tl V3139)) (= () (tl (tl V3139))))) (cons (hd V3139) (cons () ()))) (true (shen.f_error <e>))))




"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.f_error (V2753) (do (shen.prhush (cn "partial function " (shen.app V2753 ";
" shen.a)) (stoutput)) (do (if (and (not (shen.tracked? V2753)) (y-or-n? (cn "track " (shen.app V2753 "? " shen.a)))) (shen.track-function (ps V2753)) shen.ok) (simple-error "aborted"))))

(defun shen.tracked? (V2755) (element? V2755 (value shen.*tracking*)))

(defun track (V2757) (let Source (ps V2757) (shen.track-function Source)))

(defun shen.track-function (V2759) (cond ((and (cons? V2759) (and (= defun (hd V2759)) (and (cons? (tl V2759)) (and (cons? (tl (tl V2759))) (and (cons? (tl (tl (tl V2759)))) (= () (tl (tl (tl (tl V2759)))))))))) (let KL (cons defun (cons (hd (tl V2759)) (cons (hd (tl (tl V2759))) (cons (shen.insert-tracking-code (hd (tl V2759)) (hd (tl (tl V2759))) (hd (tl (tl (tl V2759))))) ())))) (let Ob (eval-kl KL) (let Tr (set shen.*tracking* (cons Ob (value shen.*tracking*))) Ob)))) (true (shen.f_error shen.track-function))))

(defun shen.insert-tracking-code (V2763 V2764 V2765) (cons do (cons (cons set (cons shen.*call* (cons (cons + (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.input-track (cons (cons value (cons shen.*call* ())) (cons V2763 (cons (shen.cons_form V2764) ())))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons (cons let (cons Result (cons V2765 (cons (cons do (cons (cons shen.output-track (cons (cons value (cons shen.*call* ())) (cons V2763 (cons Result ())))) (cons (cons do (cons (cons set (cons shen.*call* (cons (cons - (cons (cons value (cons shen.*call* ())) (cons 1 ()))) ()))) (cons (cons do (cons (cons shen.terpri-or-read-char ()) (cons Result ()))) ()))) ()))) ())))) ()))) ()))) ()))))

(set shen.*step* false)

(defun step (V2771) (cond ((= + V2771) (set shen.*step* true)) ((= - V2771) (set shen.*step* false)) (true (simple-error "step expects a + or a -.
"))))

(defun spy (V2777) (cond ((= + V2777) (set shen.*spy* true)) ((= - V2777) (set shen.*spy* false)) (true (simple-error "spy expects a + or a -.
"))))

(defun shen.terpri-or-read-char () (if (value shen.*step*) (shen.check-byte (read-byte (value *stinput*))) (nl 1)))

(defun shen.check-byte (V2783) (cond ((= V2783 (shen.hat)) (simple-error "aborted")) (true true)))

(defun shen.input-track (V2787 V2788 V2789) (do (shen.prhush (cn "
" (shen.app (shen.spaces V2787) (cn "<" (shen.app V2787 (cn "> Inputs to " (shen.app V2788 (cn " 
" (shen.app (shen.spaces V2787) "" shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)) (shen.recursively-print V2789)))

(defun shen.recursively-print (V2791) (cond ((= () V2791) (shen.prhush " ==>" (stoutput))) ((cons? V2791) (do (print (hd V2791)) (do (shen.prhush ", " (stoutput)) (shen.recursively-print (tl V2791))))) (true (shen.f_error shen.recursively-print))))

(defun shen.spaces (V2793) (cond ((= 0 V2793) "") (true (cn " " (shen.spaces (- V2793 1))))))

(defun shen.output-track (V2797 V2798 V2799) (shen.prhush (cn "
" (shen.app (shen.spaces V2797) (cn "<" (shen.app V2797 (cn "> Output from " (shen.app V2798 (cn " 
" (shen.app (shen.spaces V2797) (cn "==> " (shen.app V2799 "" shen.s)) shen.a)) shen.a)) shen.a)) shen.a)) (stoutput)))

(defun untrack (V2801) (let Tracking (value shen.*tracking*) (let Tracking (set shen.*tracking* (remove V2801 Tracking)) (eval (ps V2801)))))

(defun profile (V2803) (shen.profile-help (ps V2803)))

(defun shen.profile-help (V2809) (cond ((and (cons? V2809) (and (= defun (hd V2809)) (and (cons? (tl V2809)) (and (cons? (tl (tl V2809))) (and (cons? (tl (tl (tl V2809)))) (= () (tl (tl (tl (tl V2809)))))))))) (let G (gensym shen.f) (let Profile (cons defun (cons (hd (tl V2809)) (cons (hd (tl (tl V2809))) (cons (shen.profile-func (hd (tl V2809)) (hd (tl (tl V2809))) (cons G (hd (tl (tl V2809))))) ())))) (let Def (cons defun (cons G (cons (hd (tl (tl V2809))) (cons (subst G (hd (tl V2809)) (hd (tl (tl (tl V2809))))) ())))) (let CompileProfile (shen.eval-without-macros Profile) (let CompileG (shen.eval-without-macros Def) (hd (tl V2809)))))))) (true (simple-error "Cannot profile.
"))))

(defun unprofile (V2811) (untrack V2811))

(defun shen.profile-func (V2815 V2816 V2817) (cons let (cons Start (cons (cons get-time (cons run ())) (cons (cons let (cons Result (cons V2817 (cons (cons let (cons Finish (cons (cons - (cons (cons get-time (cons run ())) (cons Start ()))) (cons (cons let (cons Record (cons (cons shen.put-profile (cons V2815 (cons (cons + (cons (cons shen.get-profile (cons V2815 ())) (cons Finish ()))) ()))) (cons Result ())))) ())))) ())))) ())))))

(defun profile-results (V2819) (let Results (shen.get-profile V2819) (let Initialise (shen.put-profile V2819 0) (@p V2819 Results))))

(defun shen.get-profile (V2821) (get/or V2821 profile (freeze 0) (value *property-vector*)))

(defun shen.put-profile (V2824 V2825) (put V2824 profile V2825 (value *property-vector*)))




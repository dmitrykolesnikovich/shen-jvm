"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.typecheck (V2349 V2350) (let Curry (shen.curry V2349) (let ProcessN (shen.start-new-prolog-process) (let Type (shen.insert-prolog-variables (shen.demodulate (shen.curry-type V2350)) ProcessN) (let Continuation (freeze (return Type ProcessN shen.void)) (shen.t* (cons Curry (cons : (cons Type ()))) () ProcessN Continuation))))))

(defun shen.curry (V2352) (cond ((and (cons? V2352) (shen.special? (hd V2352))) (cons (hd V2352) (map (lambda Y (shen.curry Y)) (tl V2352)))) ((and (cons? V2352) (and (cons? (tl V2352)) (shen.extraspecial? (hd V2352)))) V2352) ((and (cons? V2352) (and (= type (hd V2352)) (and (cons? (tl V2352)) (and (cons? (tl (tl V2352))) (= () (tl (tl (tl V2352)))))))) (cons type (cons (shen.curry (hd (tl V2352))) (tl (tl V2352))))) ((and (cons? V2352) (and (cons? (tl V2352)) (cons? (tl (tl V2352))))) (shen.curry (cons (cons (hd V2352) (cons (hd (tl V2352)) ())) (tl (tl V2352))))) ((and (cons? V2352) (and (cons? (tl V2352)) (= () (tl (tl V2352))))) (cons (shen.curry (hd V2352)) (cons (shen.curry (hd (tl V2352))) ()))) (true V2352)))

(defun shen.special? (V2354) (element? V2354 (value shen.*special*)))

(defun shen.extraspecial? (V2356) (element? V2356 (value shen.*extraspecial*)))

(defun shen.t* (V2361 V2362 V2363 V2364) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (let Error (shen.newpv V2363) (do (shen.incinfs) (fwhen (shen.maxinfexceeded?) V2363 (freeze (bind Error (shen.errormaxinfs) V2363 V2364))))) (if (= Case false) (let Case (let V2341 (shen.lazyderef V2361 V2363) (if (= fail V2341) (do (shen.incinfs) (cut Throwcontrol V2363 (freeze (shen.prolog-failure V2363 V2364)))) false)) (if (= Case false) (let Case (let V2342 (shen.lazyderef V2361 V2363) (if (cons? V2342) (let X (hd V2342) (let V2343 (shen.lazyderef (tl V2342) V2363) (if (cons? V2343) (let V2344 (shen.lazyderef (hd V2343) V2363) (if (= : V2344) (let V2345 (shen.lazyderef (tl V2343) V2363) (if (cons? V2345) (let A (hd V2345) (let V2346 (shen.lazyderef (tl V2345) V2363) (if (= () V2346) (do (shen.incinfs) (fwhen (shen.type-theory-enabled?) V2363 (freeze (cut Throwcontrol V2363 (freeze (shen.th* X A V2362 V2363 V2364)))))) false))) false)) false)) false))) false)) (if (= Case false) (let Datatypes (shen.newpv V2363) (do (shen.incinfs) (shen.show V2361 V2362 V2363 (freeze (bind Datatypes (value shen.*datatypes*) V2363 (freeze (shen.udefs* V2361 V2362 Datatypes V2363 V2364))))))) Case)) Case)) Case)))))

(defun shen.type-theory-enabled? () (value shen.*shen-type-theory-enabled?*))

(defun enable-type-theory (V2370) (cond ((= + V2370) (set shen.*shen-type-theory-enabled?* true)) ((= - V2370) (set shen.*shen-type-theory-enabled?* false)) (true (simple-error "enable-type-theory expects a + or a -
"))))

(defun shen.prolog-failure (V2381 V2382) false)

(defun shen.maxinfexceeded? () (> (inferences) (value shen.*maxinferences*)))

(defun shen.errormaxinfs () (simple-error "maximum inferences exceeded~%"))

(defun shen.udefs* (V2388 V2389 V2390 V2391 V2392) (let Case (let V2337 (shen.lazyderef V2390 V2391) (if (cons? V2337) (let D (hd V2337) (do (shen.incinfs) (call (cons D (cons V2388 (cons V2389 ()))) V2391 V2392))) false)) (if (= Case false) (let V2338 (shen.lazyderef V2390 V2391) (if (cons? V2338) (let Ds (tl V2338) (do (shen.incinfs) (shen.udefs* V2388 V2389 Ds V2391 V2392))) false)) Case)))

(defun shen.th* (V2398 V2399 V2400 V2401 V2402) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (do (shen.incinfs) (shen.show (cons V2398 (cons : (cons V2399 ()))) V2400 V2401 (freeze (fwhen false V2401 V2402)))) (if (= Case false) (let Case (let F (shen.newpv V2401) (do (shen.incinfs) (fwhen (shen.typedf? (shen.lazyderef V2398 V2401)) V2401 (freeze (bind F (shen.sigf (shen.lazyderef V2398 V2401)) V2401 (freeze (call (cons F (cons V2399 ())) V2401 V2402))))))) (if (= Case false) (let Case (do (shen.incinfs) (shen.base V2398 V2399 V2401 V2402)) (if (= Case false) (let Case (do (shen.incinfs) (shen.by_hypothesis V2398 V2399 V2400 V2401 V2402)) (if (= Case false) (let Case (let V2233 (shen.lazyderef V2398 V2401) (if (cons? V2233) (let F (hd V2233) (let V2234 (shen.lazyderef (tl V2233) V2401) (if (= () V2234) (do (shen.incinfs) (shen.th* F (cons --> (cons V2399 ())) V2400 V2401 V2402)) false))) false)) (if (= Case false) (let Case (let V2235 (shen.lazyderef V2398 V2401) (if (cons? V2235) (let F (hd V2235) (let V2236 (shen.lazyderef (tl V2235) V2401) (if (cons? V2236) (let X (hd V2236) (let V2237 (shen.lazyderef (tl V2236) V2401) (if (= () V2237) (let B (shen.newpv V2401) (do (shen.incinfs) (shen.th* F (cons B (cons --> (cons V2399 ()))) V2400 V2401 (freeze (shen.th* X B V2400 V2401 V2402))))) false))) false))) false)) (if (= Case false) (let Case (let V2238 (shen.lazyderef V2398 V2401) (if (cons? V2238) (let V2239 (shen.lazyderef (hd V2238) V2401) (if (= cons V2239) (let V2240 (shen.lazyderef (tl V2238) V2401) (if (cons? V2240) (let X (hd V2240) (let V2241 (shen.lazyderef (tl V2240) V2401) (if (cons? V2241) (let Y (hd V2241) (let V2242 (shen.lazyderef (tl V2241) V2401) (if (= () V2242) (let V2243 (shen.lazyderef V2399 V2401) (if (cons? V2243) (let V2244 (shen.lazyderef (hd V2243) V2401) (if (= list V2244) (let V2245 (shen.lazyderef (tl V2243) V2401) (if (cons? V2245) (let A (hd V2245) (let V2246 (shen.lazyderef (tl V2245) V2401) (if (= () V2246) (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons list (cons A ())) V2400 V2401 V2402)))) (if (shen.pvar? V2246) (do (shen.bindv V2246 () V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons list (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2246 V2401) Result))) false)))) (if (shen.pvar? V2245) (let A (shen.newpv V2401) (do (shen.bindv V2245 (cons A ()) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons list (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2245 V2401) Result)))) false))) (if (shen.pvar? V2244) (do (shen.bindv V2244 list V2401) (let Result (let V2247 (shen.lazyderef (tl V2243) V2401) (if (cons? V2247) (let A (hd V2247) (let V2248 (shen.lazyderef (tl V2247) V2401) (if (= () V2248) (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons list (cons A ())) V2400 V2401 V2402)))) (if (shen.pvar? V2248) (do (shen.bindv V2248 () V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons list (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2248 V2401) Result))) false)))) (if (shen.pvar? V2247) (let A (shen.newpv V2401) (do (shen.bindv V2247 (cons A ()) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons list (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2247 V2401) Result)))) false))) (do (shen.unbindv V2244 V2401) Result))) false))) (if (shen.pvar? V2243) (let A (shen.newpv V2401) (do (shen.bindv V2243 (cons list (cons A ())) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons list (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2243 V2401) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2249 (shen.lazyderef V2398 V2401) (if (cons? V2249) (let V2250 (shen.lazyderef (hd V2249) V2401) (if (= @p V2250) (let V2251 (shen.lazyderef (tl V2249) V2401) (if (cons? V2251) (let X (hd V2251) (let V2252 (shen.lazyderef (tl V2251) V2401) (if (cons? V2252) (let Y (hd V2252) (let V2253 (shen.lazyderef (tl V2252) V2401) (if (= () V2253) (let V2254 (shen.lazyderef V2399 V2401) (if (cons? V2254) (let A (hd V2254) (let V2255 (shen.lazyderef (tl V2254) V2401) (if (cons? V2255) (let V2256 (shen.lazyderef (hd V2255) V2401) (if (= * V2256) (let V2257 (shen.lazyderef (tl V2255) V2401) (if (cons? V2257) (let B (hd V2257) (let V2258 (shen.lazyderef (tl V2257) V2401) (if (= () V2258) (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (if (shen.pvar? V2258) (do (shen.bindv V2258 () V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (do (shen.unbindv V2258 V2401) Result))) false)))) (if (shen.pvar? V2257) (let B (shen.newpv V2401) (do (shen.bindv V2257 (cons B ()) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (do (shen.unbindv V2257 V2401) Result)))) false))) (if (shen.pvar? V2256) (do (shen.bindv V2256 * V2401) (let Result (let V2259 (shen.lazyderef (tl V2255) V2401) (if (cons? V2259) (let B (hd V2259) (let V2260 (shen.lazyderef (tl V2259) V2401) (if (= () V2260) (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (if (shen.pvar? V2260) (do (shen.bindv V2260 () V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (do (shen.unbindv V2260 V2401) Result))) false)))) (if (shen.pvar? V2259) (let B (shen.newpv V2401) (do (shen.bindv V2259 (cons B ()) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (do (shen.unbindv V2259 V2401) Result)))) false))) (do (shen.unbindv V2256 V2401) Result))) false))) (if (shen.pvar? V2255) (let B (shen.newpv V2401) (do (shen.bindv V2255 (cons * (cons B ())) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (do (shen.unbindv V2255 V2401) Result)))) false)))) (if (shen.pvar? V2254) (let A (shen.newpv V2401) (let B (shen.newpv V2401) (do (shen.bindv V2254 (cons A (cons * (cons B ()))) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y B V2400 V2401 V2402)))) (do (shen.unbindv V2254 V2401) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2261 (shen.lazyderef V2398 V2401) (if (cons? V2261) (let V2262 (shen.lazyderef (hd V2261) V2401) (if (= @v V2262) (let V2263 (shen.lazyderef (tl V2261) V2401) (if (cons? V2263) (let X (hd V2263) (let V2264 (shen.lazyderef (tl V2263) V2401) (if (cons? V2264) (let Y (hd V2264) (let V2265 (shen.lazyderef (tl V2264) V2401) (if (= () V2265) (let V2266 (shen.lazyderef V2399 V2401) (if (cons? V2266) (let V2267 (shen.lazyderef (hd V2266) V2401) (if (= vector V2267) (let V2268 (shen.lazyderef (tl V2266) V2401) (if (cons? V2268) (let A (hd V2268) (let V2269 (shen.lazyderef (tl V2268) V2401) (if (= () V2269) (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons vector (cons A ())) V2400 V2401 V2402)))) (if (shen.pvar? V2269) (do (shen.bindv V2269 () V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons vector (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2269 V2401) Result))) false)))) (if (shen.pvar? V2268) (let A (shen.newpv V2401) (do (shen.bindv V2268 (cons A ()) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons vector (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2268 V2401) Result)))) false))) (if (shen.pvar? V2267) (do (shen.bindv V2267 vector V2401) (let Result (let V2270 (shen.lazyderef (tl V2266) V2401) (if (cons? V2270) (let A (hd V2270) (let V2271 (shen.lazyderef (tl V2270) V2401) (if (= () V2271) (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons vector (cons A ())) V2400 V2401 V2402)))) (if (shen.pvar? V2271) (do (shen.bindv V2271 () V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons vector (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2271 V2401) Result))) false)))) (if (shen.pvar? V2270) (let A (shen.newpv V2401) (do (shen.bindv V2270 (cons A ()) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons vector (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2270 V2401) Result)))) false))) (do (shen.unbindv V2267 V2401) Result))) false))) (if (shen.pvar? V2266) (let A (shen.newpv V2401) (do (shen.bindv V2266 (cons vector (cons A ())) V2401) (let Result (do (shen.incinfs) (shen.th* X A V2400 V2401 (freeze (shen.th* Y (cons vector (cons A ())) V2400 V2401 V2402)))) (do (shen.unbindv V2266 V2401) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2272 (shen.lazyderef V2398 V2401) (if (cons? V2272) (let V2273 (shen.lazyderef (hd V2272) V2401) (if (= @s V2273) (let V2274 (shen.lazyderef (tl V2272) V2401) (if (cons? V2274) (let X (hd V2274) (let V2275 (shen.lazyderef (tl V2274) V2401) (if (cons? V2275) (let Y (hd V2275) (let V2276 (shen.lazyderef (tl V2275) V2401) (if (= () V2276) (let V2277 (shen.lazyderef V2399 V2401) (if (= string V2277) (do (shen.incinfs) (shen.th* X string V2400 V2401 (freeze (shen.th* Y string V2400 V2401 V2402)))) (if (shen.pvar? V2277) (do (shen.bindv V2277 string V2401) (let Result (do (shen.incinfs) (shen.th* X string V2400 V2401 (freeze (shen.th* Y string V2400 V2401 V2402)))) (do (shen.unbindv V2277 V2401) Result))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2278 (shen.lazyderef V2398 V2401) (if (cons? V2278) (let V2279 (shen.lazyderef (hd V2278) V2401) (if (= lambda V2279) (let V2280 (shen.lazyderef (tl V2278) V2401) (if (cons? V2280) (let X (hd V2280) (let V2281 (shen.lazyderef (tl V2280) V2401) (if (cons? V2281) (let Y (hd V2281) (let V2282 (shen.lazyderef (tl V2281) V2401) (if (= () V2282) (let V2283 (shen.lazyderef V2399 V2401) (if (cons? V2283) (let A (hd V2283) (let V2284 (shen.lazyderef (tl V2283) V2401) (if (cons? V2284) (let V2285 (shen.lazyderef (hd V2284) V2401) (if (= --> V2285) (let V2286 (shen.lazyderef (tl V2284) V2401) (if (cons? V2286) (let B (hd V2286) (let V2287 (shen.lazyderef (tl V2286) V2401) (if (= () V2287) (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (if (shen.pvar? V2287) (do (shen.bindv V2287 () V2401) (let Result (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (do (shen.unbindv V2287 V2401) Result))) false)))) (if (shen.pvar? V2286) (let B (shen.newpv V2401) (do (shen.bindv V2286 (cons B ()) V2401) (let Result (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (do (shen.unbindv V2286 V2401) Result)))) false))) (if (shen.pvar? V2285) (do (shen.bindv V2285 --> V2401) (let Result (let V2288 (shen.lazyderef (tl V2284) V2401) (if (cons? V2288) (let B (hd V2288) (let V2289 (shen.lazyderef (tl V2288) V2401) (if (= () V2289) (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (if (shen.pvar? V2289) (do (shen.bindv V2289 () V2401) (let Result (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (do (shen.unbindv V2289 V2401) Result))) false)))) (if (shen.pvar? V2288) (let B (shen.newpv V2401) (do (shen.bindv V2288 (cons B ()) V2401) (let Result (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (do (shen.unbindv V2288 V2401) Result)))) false))) (do (shen.unbindv V2285 V2401) Result))) false))) (if (shen.pvar? V2284) (let B (shen.newpv V2401) (do (shen.bindv V2284 (cons --> (cons B ())) V2401) (let Result (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (do (shen.unbindv V2284 V2401) Result)))) false)))) (if (shen.pvar? V2283) (let A (shen.newpv V2401) (let B (shen.newpv V2401) (do (shen.bindv V2283 (cons A (cons --> (cons B ()))) V2401) (let Result (let Z (shen.newpv V2401) (let X&& (shen.newpv V2401) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Y V2401)) V2401 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2400) V2401 V2402)))))))))) (do (shen.unbindv V2283 V2401) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2290 (shen.lazyderef V2398 V2401) (if (cons? V2290) (let V2291 (shen.lazyderef (hd V2290) V2401) (if (= let V2291) (let V2292 (shen.lazyderef (tl V2290) V2401) (if (cons? V2292) (let X (hd V2292) (let V2293 (shen.lazyderef (tl V2292) V2401) (if (cons? V2293) (let Y (hd V2293) (let V2294 (shen.lazyderef (tl V2293) V2401) (if (cons? V2294) (let Z (hd V2294) (let V2295 (shen.lazyderef (tl V2294) V2401) (if (= () V2295) (let W (shen.newpv V2401) (let X&& (shen.newpv V2401) (let B (shen.newpv V2401) (do (shen.incinfs) (shen.th* Y B V2400 V2401 (freeze (bind X&& (shen.placeholder) V2401 (freeze (bind W (shen.ebr (shen.lazyderef X&& V2401) (shen.lazyderef X V2401) (shen.lazyderef Z V2401)) V2401 (freeze (shen.th* W V2399 (cons (cons X&& (cons : (cons B ()))) V2400) V2401 V2402))))))))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2296 (shen.lazyderef V2398 V2401) (if (cons? V2296) (let V2297 (shen.lazyderef (hd V2296) V2401) (if (= open V2297) (let V2298 (shen.lazyderef (tl V2296) V2401) (if (cons? V2298) (let FileName (hd V2298) (let V2299 (shen.lazyderef (tl V2298) V2401) (if (cons? V2299) (let Direction2229 (hd V2299) (let V2300 (shen.lazyderef (tl V2299) V2401) (if (= () V2300) (let V2301 (shen.lazyderef V2399 V2401) (if (cons? V2301) (let V2302 (shen.lazyderef (hd V2301) V2401) (if (= stream V2302) (let V2303 (shen.lazyderef (tl V2301) V2401) (if (cons? V2303) (let Direction (hd V2303) (let V2304 (shen.lazyderef (tl V2303) V2401) (if (= () V2304) (do (shen.incinfs) (unify! Direction Direction2229 V2401 (freeze (cut Throwcontrol V2401 (freeze (fwhen (element? (shen.lazyderef Direction V2401) (cons in (cons out ()))) V2401 (freeze (shen.th* FileName string V2400 V2401 V2402)))))))) (if (shen.pvar? V2304) (do (shen.bindv V2304 () V2401) (let Result (do (shen.incinfs) (unify! Direction Direction2229 V2401 (freeze (cut Throwcontrol V2401 (freeze (fwhen (element? (shen.lazyderef Direction V2401) (cons in (cons out ()))) V2401 (freeze (shen.th* FileName string V2400 V2401 V2402)))))))) (do (shen.unbindv V2304 V2401) Result))) false)))) (if (shen.pvar? V2303) (let Direction (shen.newpv V2401) (do (shen.bindv V2303 (cons Direction ()) V2401) (let Result (do (shen.incinfs) (unify! Direction Direction2229 V2401 (freeze (cut Throwcontrol V2401 (freeze (fwhen (element? (shen.lazyderef Direction V2401) (cons in (cons out ()))) V2401 (freeze (shen.th* FileName string V2400 V2401 V2402)))))))) (do (shen.unbindv V2303 V2401) Result)))) false))) (if (shen.pvar? V2302) (do (shen.bindv V2302 stream V2401) (let Result (let V2305 (shen.lazyderef (tl V2301) V2401) (if (cons? V2305) (let Direction (hd V2305) (let V2306 (shen.lazyderef (tl V2305) V2401) (if (= () V2306) (do (shen.incinfs) (unify! Direction Direction2229 V2401 (freeze (cut Throwcontrol V2401 (freeze (fwhen (element? (shen.lazyderef Direction V2401) (cons in (cons out ()))) V2401 (freeze (shen.th* FileName string V2400 V2401 V2402)))))))) (if (shen.pvar? V2306) (do (shen.bindv V2306 () V2401) (let Result (do (shen.incinfs) (unify! Direction Direction2229 V2401 (freeze (cut Throwcontrol V2401 (freeze (fwhen (element? (shen.lazyderef Direction V2401) (cons in (cons out ()))) V2401 (freeze (shen.th* FileName string V2400 V2401 V2402)))))))) (do (shen.unbindv V2306 V2401) Result))) false)))) (if (shen.pvar? V2305) (let Direction (shen.newpv V2401) (do (shen.bindv V2305 (cons Direction ()) V2401) (let Result (do (shen.incinfs) (unify! Direction Direction2229 V2401 (freeze (cut Throwcontrol V2401 (freeze (fwhen (element? (shen.lazyderef Direction V2401) (cons in (cons out ()))) V2401 (freeze (shen.th* FileName string V2400 V2401 V2402)))))))) (do (shen.unbindv V2305 V2401) Result)))) false))) (do (shen.unbindv V2302 V2401) Result))) false))) (if (shen.pvar? V2301) (let Direction (shen.newpv V2401) (do (shen.bindv V2301 (cons stream (cons Direction ())) V2401) (let Result (do (shen.incinfs) (unify! Direction Direction2229 V2401 (freeze (cut Throwcontrol V2401 (freeze (fwhen (element? (shen.lazyderef Direction V2401) (cons in (cons out ()))) V2401 (freeze (shen.th* FileName string V2400 V2401 V2402)))))))) (do (shen.unbindv V2301 V2401) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2307 (shen.lazyderef V2398 V2401) (if (cons? V2307) (let V2308 (shen.lazyderef (hd V2307) V2401) (if (= type V2308) (let V2309 (shen.lazyderef (tl V2307) V2401) (if (cons? V2309) (let X (hd V2309) (let V2310 (shen.lazyderef (tl V2309) V2401) (if (cons? V2310) (let A (hd V2310) (let V2311 (shen.lazyderef (tl V2310) V2401) (if (= () V2311) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (unify A V2399 V2401 (freeze (shen.th* X A V2400 V2401 V2402)))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2312 (shen.lazyderef V2398 V2401) (if (cons? V2312) (let V2313 (shen.lazyderef (hd V2312) V2401) (if (= input+ V2313) (let V2314 (shen.lazyderef (tl V2312) V2401) (if (cons? V2314) (let A (hd V2314) (let V2315 (shen.lazyderef (tl V2314) V2401) (if (cons? V2315) (let Stream (hd V2315) (let V2316 (shen.lazyderef (tl V2315) V2401) (if (= () V2316) (let C (shen.newpv V2401) (do (shen.incinfs) (bind C (shen.demodulate (shen.lazyderef A V2401)) V2401 (freeze (unify V2399 C V2401 (freeze (shen.th* Stream (cons stream (cons in ())) V2400 V2401 V2402))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2317 (shen.lazyderef V2398 V2401) (if (cons? V2317) (let V2318 (shen.lazyderef (hd V2317) V2401) (if (= set V2318) (let V2319 (shen.lazyderef (tl V2317) V2401) (if (cons? V2319) (let Var (hd V2319) (let V2320 (shen.lazyderef (tl V2319) V2401) (if (cons? V2320) (let Val (hd V2320) (let V2321 (shen.lazyderef (tl V2320) V2401) (if (= () V2321) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (shen.th* Var symbol V2400 V2401 (freeze (cut Throwcontrol V2401 (freeze (shen.th* (cons value (cons Var ())) V2399 V2400 V2401 (freeze (shen.th* Val V2399 V2400 V2401 V2402)))))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let NewHyp (shen.newpv V2401) (do (shen.incinfs) (shen.t*-hyps V2400 NewHyp V2401 (freeze (shen.th* V2398 V2399 NewHyp V2401 V2402))))) (if (= Case false) (let Case (let V2322 (shen.lazyderef V2398 V2401) (if (cons? V2322) (let V2323 (shen.lazyderef (hd V2322) V2401) (if (= define V2323) (let V2324 (shen.lazyderef (tl V2322) V2401) (if (cons? V2324) (let F (hd V2324) (let X (tl V2324) (do (shen.incinfs) (cut Throwcontrol V2401 (freeze (shen.t*-def (cons define (cons F X)) V2399 V2400 V2401 V2402)))))) false)) false)) false)) (if (= Case false) (let Case (let V2325 (shen.lazyderef V2398 V2401) (if (cons? V2325) (let V2326 (shen.lazyderef (hd V2325) V2401) (if (= defmacro V2326) (let V2327 (shen.lazyderef V2399 V2401) (if (= unit V2327) (do (shen.incinfs) (cut Throwcontrol V2401 V2402)) (if (shen.pvar? V2327) (do (shen.bindv V2327 unit V2401) (let Result (do (shen.incinfs) (cut Throwcontrol V2401 V2402)) (do (shen.unbindv V2327 V2401) Result))) false))) false)) false)) (if (= Case false) (let Case (let V2328 (shen.lazyderef V2398 V2401) (if (cons? V2328) (let V2329 (shen.lazyderef (hd V2328) V2401) (if (= shen.process-datatype V2329) (let V2330 (shen.lazyderef V2399 V2401) (if (= symbol V2330) (do (shen.incinfs) (thaw V2402)) (if (shen.pvar? V2330) (do (shen.bindv V2330 symbol V2401) (let Result (do (shen.incinfs) (thaw V2402)) (do (shen.unbindv V2330 V2401) Result))) false))) false)) false)) (if (= Case false) (let Case (let V2331 (shen.lazyderef V2398 V2401) (if (cons? V2331) (let V2332 (shen.lazyderef (hd V2331) V2401) (if (= shen.synonyms-help V2332) (let V2333 (shen.lazyderef V2399 V2401) (if (= symbol V2333) (do (shen.incinfs) (thaw V2402)) (if (shen.pvar? V2333) (do (shen.bindv V2333 symbol V2401) (let Result (do (shen.incinfs) (thaw V2402)) (do (shen.unbindv V2333 V2401) Result))) false))) false)) false)) (if (= Case false) (let Datatypes (shen.newpv V2401) (do (shen.incinfs) (bind Datatypes (value shen.*datatypes*) V2401 (freeze (shen.udefs* (cons V2398 (cons : (cons V2399 ()))) V2400 Datatypes V2401 V2402))))) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)))))

(defun shen.t*-hyps (V2407 V2408 V2409 V2410) (let Case (let V2144 (shen.lazyderef V2407 V2409) (if (cons? V2144) (let V2145 (shen.lazyderef (hd V2144) V2409) (if (cons? V2145) (let V2146 (shen.lazyderef (hd V2145) V2409) (if (cons? V2146) (let V2147 (shen.lazyderef (hd V2146) V2409) (if (= cons V2147) (let V2148 (shen.lazyderef (tl V2146) V2409) (if (cons? V2148) (let X (hd V2148) (let V2149 (shen.lazyderef (tl V2148) V2409) (if (cons? V2149) (let Y (hd V2149) (let V2150 (shen.lazyderef (tl V2149) V2409) (if (= () V2150) (let V2151 (shen.lazyderef (tl V2145) V2409) (if (cons? V2151) (let V2152 (shen.lazyderef (hd V2151) V2409) (if (= : V2152) (let V2153 (shen.lazyderef (tl V2151) V2409) (if (cons? V2153) (let V2154 (shen.lazyderef (hd V2153) V2409) (if (cons? V2154) (let V2155 (shen.lazyderef (hd V2154) V2409) (if (= list V2155) (let V2156 (shen.lazyderef (tl V2154) V2409) (if (cons? V2156) (let A (hd V2156) (let V2157 (shen.lazyderef (tl V2156) V2409) (if (= () V2157) (let V2158 (shen.lazyderef (tl V2153) V2409) (if (= () V2158) (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2158) (do (shen.bindv V2158 () V2409) (let Result (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2158 V2409) Result))) false))) (if (shen.pvar? V2157) (do (shen.bindv V2157 () V2409) (let Result (let V2159 (shen.lazyderef (tl V2153) V2409) (if (= () V2159) (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2159) (do (shen.bindv V2159 () V2409) (let Result (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2159 V2409) Result))) false))) (do (shen.unbindv V2157 V2409) Result))) false)))) (if (shen.pvar? V2156) (let A (shen.newpv V2409) (do (shen.bindv V2156 (cons A ()) V2409) (let Result (let V2160 (shen.lazyderef (tl V2153) V2409) (if (= () V2160) (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2160) (do (shen.bindv V2160 () V2409) (let Result (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2160 V2409) Result))) false))) (do (shen.unbindv V2156 V2409) Result)))) false))) (if (shen.pvar? V2155) (do (shen.bindv V2155 list V2409) (let Result (let V2161 (shen.lazyderef (tl V2154) V2409) (if (cons? V2161) (let A (hd V2161) (let V2162 (shen.lazyderef (tl V2161) V2409) (if (= () V2162) (let V2163 (shen.lazyderef (tl V2153) V2409) (if (= () V2163) (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2163) (do (shen.bindv V2163 () V2409) (let Result (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2163 V2409) Result))) false))) (if (shen.pvar? V2162) (do (shen.bindv V2162 () V2409) (let Result (let V2164 (shen.lazyderef (tl V2153) V2409) (if (= () V2164) (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2164) (do (shen.bindv V2164 () V2409) (let Result (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2164 V2409) Result))) false))) (do (shen.unbindv V2162 V2409) Result))) false)))) (if (shen.pvar? V2161) (let A (shen.newpv V2409) (do (shen.bindv V2161 (cons A ()) V2409) (let Result (let V2165 (shen.lazyderef (tl V2153) V2409) (if (= () V2165) (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2165) (do (shen.bindv V2165 () V2409) (let Result (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2165 V2409) Result))) false))) (do (shen.unbindv V2161 V2409) Result)))) false))) (do (shen.unbindv V2155 V2409) Result))) false))) (if (shen.pvar? V2154) (let A (shen.newpv V2409) (do (shen.bindv V2154 (cons list (cons A ())) V2409) (let Result (let V2166 (shen.lazyderef (tl V2153) V2409) (if (= () V2166) (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2166) (do (shen.bindv V2166 () V2409) (let Result (let Hyp (tl V2144) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons list (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2166 V2409) Result))) false))) (do (shen.unbindv V2154 V2409) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2167 (shen.lazyderef V2407 V2409) (if (cons? V2167) (let V2168 (shen.lazyderef (hd V2167) V2409) (if (cons? V2168) (let V2169 (shen.lazyderef (hd V2168) V2409) (if (cons? V2169) (let V2170 (shen.lazyderef (hd V2169) V2409) (if (= @p V2170) (let V2171 (shen.lazyderef (tl V2169) V2409) (if (cons? V2171) (let X (hd V2171) (let V2172 (shen.lazyderef (tl V2171) V2409) (if (cons? V2172) (let Y (hd V2172) (let V2173 (shen.lazyderef (tl V2172) V2409) (if (= () V2173) (let V2174 (shen.lazyderef (tl V2168) V2409) (if (cons? V2174) (let V2175 (shen.lazyderef (hd V2174) V2409) (if (= : V2175) (let V2176 (shen.lazyderef (tl V2174) V2409) (if (cons? V2176) (let V2177 (shen.lazyderef (hd V2176) V2409) (if (cons? V2177) (let A (hd V2177) (let V2178 (shen.lazyderef (tl V2177) V2409) (if (cons? V2178) (let V2179 (shen.lazyderef (hd V2178) V2409) (if (= * V2179) (let V2180 (shen.lazyderef (tl V2178) V2409) (if (cons? V2180) (let B (hd V2180) (let V2181 (shen.lazyderef (tl V2180) V2409) (if (= () V2181) (let V2182 (shen.lazyderef (tl V2176) V2409) (if (= () V2182) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2182) (do (shen.bindv V2182 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2182 V2409) Result))) false))) (if (shen.pvar? V2181) (do (shen.bindv V2181 () V2409) (let Result (let V2183 (shen.lazyderef (tl V2176) V2409) (if (= () V2183) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2183) (do (shen.bindv V2183 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2183 V2409) Result))) false))) (do (shen.unbindv V2181 V2409) Result))) false)))) (if (shen.pvar? V2180) (let B (shen.newpv V2409) (do (shen.bindv V2180 (cons B ()) V2409) (let Result (let V2184 (shen.lazyderef (tl V2176) V2409) (if (= () V2184) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2184) (do (shen.bindv V2184 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2184 V2409) Result))) false))) (do (shen.unbindv V2180 V2409) Result)))) false))) (if (shen.pvar? V2179) (do (shen.bindv V2179 * V2409) (let Result (let V2185 (shen.lazyderef (tl V2178) V2409) (if (cons? V2185) (let B (hd V2185) (let V2186 (shen.lazyderef (tl V2185) V2409) (if (= () V2186) (let V2187 (shen.lazyderef (tl V2176) V2409) (if (= () V2187) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2187) (do (shen.bindv V2187 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2187 V2409) Result))) false))) (if (shen.pvar? V2186) (do (shen.bindv V2186 () V2409) (let Result (let V2188 (shen.lazyderef (tl V2176) V2409) (if (= () V2188) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2188) (do (shen.bindv V2188 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2188 V2409) Result))) false))) (do (shen.unbindv V2186 V2409) Result))) false)))) (if (shen.pvar? V2185) (let B (shen.newpv V2409) (do (shen.bindv V2185 (cons B ()) V2409) (let Result (let V2189 (shen.lazyderef (tl V2176) V2409) (if (= () V2189) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2189) (do (shen.bindv V2189 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2189 V2409) Result))) false))) (do (shen.unbindv V2185 V2409) Result)))) false))) (do (shen.unbindv V2179 V2409) Result))) false))) (if (shen.pvar? V2178) (let B (shen.newpv V2409) (do (shen.bindv V2178 (cons * (cons B ())) V2409) (let Result (let V2190 (shen.lazyderef (tl V2176) V2409) (if (= () V2190) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2190) (do (shen.bindv V2190 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2190 V2409) Result))) false))) (do (shen.unbindv V2178 V2409) Result)))) false)))) (if (shen.pvar? V2177) (let A (shen.newpv V2409) (let B (shen.newpv V2409) (do (shen.bindv V2177 (cons A (cons * (cons B ()))) V2409) (let Result (let V2191 (shen.lazyderef (tl V2176) V2409) (if (= () V2191) (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2191) (do (shen.bindv V2191 () V2409) (let Result (let Hyp (tl V2167) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (shen.lazyderef B V2409) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2191 V2409) Result))) false))) (do (shen.unbindv V2177 V2409) Result))))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2192 (shen.lazyderef V2407 V2409) (if (cons? V2192) (let V2193 (shen.lazyderef (hd V2192) V2409) (if (cons? V2193) (let V2194 (shen.lazyderef (hd V2193) V2409) (if (cons? V2194) (let V2195 (shen.lazyderef (hd V2194) V2409) (if (= @v V2195) (let V2196 (shen.lazyderef (tl V2194) V2409) (if (cons? V2196) (let X (hd V2196) (let V2197 (shen.lazyderef (tl V2196) V2409) (if (cons? V2197) (let Y (hd V2197) (let V2198 (shen.lazyderef (tl V2197) V2409) (if (= () V2198) (let V2199 (shen.lazyderef (tl V2193) V2409) (if (cons? V2199) (let V2200 (shen.lazyderef (hd V2199) V2409) (if (= : V2200) (let V2201 (shen.lazyderef (tl V2199) V2409) (if (cons? V2201) (let V2202 (shen.lazyderef (hd V2201) V2409) (if (cons? V2202) (let V2203 (shen.lazyderef (hd V2202) V2409) (if (= vector V2203) (let V2204 (shen.lazyderef (tl V2202) V2409) (if (cons? V2204) (let A (hd V2204) (let V2205 (shen.lazyderef (tl V2204) V2409) (if (= () V2205) (let V2206 (shen.lazyderef (tl V2201) V2409) (if (= () V2206) (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2206) (do (shen.bindv V2206 () V2409) (let Result (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2206 V2409) Result))) false))) (if (shen.pvar? V2205) (do (shen.bindv V2205 () V2409) (let Result (let V2207 (shen.lazyderef (tl V2201) V2409) (if (= () V2207) (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2207) (do (shen.bindv V2207 () V2409) (let Result (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2207 V2409) Result))) false))) (do (shen.unbindv V2205 V2409) Result))) false)))) (if (shen.pvar? V2204) (let A (shen.newpv V2409) (do (shen.bindv V2204 (cons A ()) V2409) (let Result (let V2208 (shen.lazyderef (tl V2201) V2409) (if (= () V2208) (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2208) (do (shen.bindv V2208 () V2409) (let Result (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2208 V2409) Result))) false))) (do (shen.unbindv V2204 V2409) Result)))) false))) (if (shen.pvar? V2203) (do (shen.bindv V2203 vector V2409) (let Result (let V2209 (shen.lazyderef (tl V2202) V2409) (if (cons? V2209) (let A (hd V2209) (let V2210 (shen.lazyderef (tl V2209) V2409) (if (= () V2210) (let V2211 (shen.lazyderef (tl V2201) V2409) (if (= () V2211) (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2211) (do (shen.bindv V2211 () V2409) (let Result (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2211 V2409) Result))) false))) (if (shen.pvar? V2210) (do (shen.bindv V2210 () V2409) (let Result (let V2212 (shen.lazyderef (tl V2201) V2409) (if (= () V2212) (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2212) (do (shen.bindv V2212 () V2409) (let Result (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2212 V2409) Result))) false))) (do (shen.unbindv V2210 V2409) Result))) false)))) (if (shen.pvar? V2209) (let A (shen.newpv V2409) (do (shen.bindv V2209 (cons A ()) V2409) (let Result (let V2213 (shen.lazyderef (tl V2201) V2409) (if (= () V2213) (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2213) (do (shen.bindv V2213 () V2409) (let Result (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2213 V2409) Result))) false))) (do (shen.unbindv V2209 V2409) Result)))) false))) (do (shen.unbindv V2203 V2409) Result))) false))) (if (shen.pvar? V2202) (let A (shen.newpv V2409) (do (shen.bindv V2202 (cons vector (cons A ())) V2409) (let Result (let V2214 (shen.lazyderef (tl V2201) V2409) (if (= () V2214) (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2214) (do (shen.bindv V2214 () V2409) (let Result (let Hyp (tl V2192) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons (shen.lazyderef A V2409) ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons (cons vector (cons (shen.lazyderef A V2409) ())) ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2214 V2409) Result))) false))) (do (shen.unbindv V2202 V2409) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2215 (shen.lazyderef V2407 V2409) (if (cons? V2215) (let V2216 (shen.lazyderef (hd V2215) V2409) (if (cons? V2216) (let V2217 (shen.lazyderef (hd V2216) V2409) (if (cons? V2217) (let V2218 (shen.lazyderef (hd V2217) V2409) (if (= @s V2218) (let V2219 (shen.lazyderef (tl V2217) V2409) (if (cons? V2219) (let X (hd V2219) (let V2220 (shen.lazyderef (tl V2219) V2409) (if (cons? V2220) (let Y (hd V2220) (let V2221 (shen.lazyderef (tl V2220) V2409) (if (= () V2221) (let V2222 (shen.lazyderef (tl V2216) V2409) (if (cons? V2222) (let V2223 (shen.lazyderef (hd V2222) V2409) (if (= : V2223) (let V2224 (shen.lazyderef (tl V2222) V2409) (if (cons? V2224) (let V2225 (shen.lazyderef (hd V2224) V2409) (if (= string V2225) (let V2226 (shen.lazyderef (tl V2224) V2409) (if (= () V2226) (let Hyp (tl V2215) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons string ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2226) (do (shen.bindv V2226 () V2409) (let Result (let Hyp (tl V2215) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons string ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2226 V2409) Result))) false))) (if (shen.pvar? V2225) (do (shen.bindv V2225 string V2409) (let Result (let V2227 (shen.lazyderef (tl V2224) V2409) (if (= () V2227) (let Hyp (tl V2215) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons string ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (if (shen.pvar? V2227) (do (shen.bindv V2227 () V2409) (let Result (let Hyp (tl V2215) (do (shen.incinfs) (bind V2408 (cons (cons (shen.lazyderef X V2409) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2409) (cons : (cons string ()))) (shen.lazyderef Hyp V2409))) V2409 V2410))) (do (shen.unbindv V2227 V2409) Result))) false))) (do (shen.unbindv V2225 V2409) Result))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let V2228 (shen.lazyderef V2407 V2409) (if (cons? V2228) (let X (hd V2228) (let Hyp (tl V2228) (let NewHyps (shen.newpv V2409) (do (shen.incinfs) (bind V2408 (cons (shen.lazyderef X V2409) (shen.lazyderef NewHyps V2409)) V2409 (freeze (shen.t*-hyps Hyp NewHyps V2409 V2410))))))) false)) Case)) Case)) Case)) Case)))

(defun shen.show (V2427 V2428 V2429 V2430) (cond ((value shen.*spy*) (do (shen.line) (do (shen.show-p (shen.deref V2427 V2429)) (do (nl 1) (do (nl 1) (do (shen.show-assumptions (shen.deref V2428 V2429) 1) (do (shen.prhush "
> " (stoutput)) (do (shen.pause-for-user) (thaw V2430))))))))) (true (thaw V2430))))

(defun shen.line () (let Infs (inferences) (shen.prhush (cn "____________________________________________________________ " (shen.app Infs (cn " inference" (shen.app (if (= 1 Infs) "" "s") " 
?- " shen.a)) shen.a)) (stoutput))))

(defun shen.show-p (V2432) (cond ((and (cons? V2432) (and (cons? (tl V2432)) (and (= : (hd (tl V2432))) (and (cons? (tl (tl V2432))) (= () (tl (tl (tl V2432)))))))) (shen.prhush (shen.app (hd V2432) (cn " : " (shen.app (hd (tl (tl V2432))) "" shen.r)) shen.r) (stoutput))) (true (shen.prhush (shen.app V2432 "" shen.r) (stoutput)))))

(defun shen.show-assumptions (V2437 V2438) (cond ((= () V2437) shen.skip) ((cons? V2437) (do (shen.prhush (shen.app V2438 ". " shen.a) (stoutput)) (do (shen.show-p (hd V2437)) (do (nl 1) (shen.show-assumptions (tl V2437) (+ V2438 1)))))) (true (shen.f_error shen.show-assumptions))))

(defun shen.pause-for-user () (let Byte (read-byte (stinput)) (if (= Byte 94) (simple-error "input aborted
") (nl 1))))

(defun shen.typedf? (V2440) (cons? (assoc V2440 (value shen.*signedfuncs*))))

(defun shen.sigf (V2442) (concat shen.type-signature-of- V2442))

(defun shen.placeholder () (gensym &&))

(defun shen.base (V2447 V2448 V2449 V2450) (let Case (let V2131 (shen.lazyderef V2448 V2449) (if (= number V2131) (do (shen.incinfs) (fwhen (number? (shen.lazyderef V2447 V2449)) V2449 V2450)) (if (shen.pvar? V2131) (do (shen.bindv V2131 number V2449) (let Result (do (shen.incinfs) (fwhen (number? (shen.lazyderef V2447 V2449)) V2449 V2450)) (do (shen.unbindv V2131 V2449) Result))) false))) (if (= Case false) (let Case (let V2132 (shen.lazyderef V2448 V2449) (if (= boolean V2132) (do (shen.incinfs) (fwhen (boolean? (shen.lazyderef V2447 V2449)) V2449 V2450)) (if (shen.pvar? V2132) (do (shen.bindv V2132 boolean V2449) (let Result (do (shen.incinfs) (fwhen (boolean? (shen.lazyderef V2447 V2449)) V2449 V2450)) (do (shen.unbindv V2132 V2449) Result))) false))) (if (= Case false) (let Case (let V2133 (shen.lazyderef V2448 V2449) (if (= string V2133) (do (shen.incinfs) (fwhen (string? (shen.lazyderef V2447 V2449)) V2449 V2450)) (if (shen.pvar? V2133) (do (shen.bindv V2133 string V2449) (let Result (do (shen.incinfs) (fwhen (string? (shen.lazyderef V2447 V2449)) V2449 V2450)) (do (shen.unbindv V2133 V2449) Result))) false))) (if (= Case false) (let Case (let V2134 (shen.lazyderef V2448 V2449) (if (= symbol V2134) (do (shen.incinfs) (fwhen (symbol? (shen.lazyderef V2447 V2449)) V2449 (freeze (fwhen (not (shen.ue? (shen.lazyderef V2447 V2449))) V2449 V2450)))) (if (shen.pvar? V2134) (do (shen.bindv V2134 symbol V2449) (let Result (do (shen.incinfs) (fwhen (symbol? (shen.lazyderef V2447 V2449)) V2449 (freeze (fwhen (not (shen.ue? (shen.lazyderef V2447 V2449))) V2449 V2450)))) (do (shen.unbindv V2134 V2449) Result))) false))) (if (= Case false) (let V2135 (shen.lazyderef V2447 V2449) (if (= () V2135) (let V2136 (shen.lazyderef V2448 V2449) (if (cons? V2136) (let V2137 (shen.lazyderef (hd V2136) V2449) (if (= list V2137) (let V2138 (shen.lazyderef (tl V2136) V2449) (if (cons? V2138) (let A (hd V2138) (let V2139 (shen.lazyderef (tl V2138) V2449) (if (= () V2139) (do (shen.incinfs) (thaw V2450)) (if (shen.pvar? V2139) (do (shen.bindv V2139 () V2449) (let Result (do (shen.incinfs) (thaw V2450)) (do (shen.unbindv V2139 V2449) Result))) false)))) (if (shen.pvar? V2138) (let A (shen.newpv V2449) (do (shen.bindv V2138 (cons A ()) V2449) (let Result (do (shen.incinfs) (thaw V2450)) (do (shen.unbindv V2138 V2449) Result)))) false))) (if (shen.pvar? V2137) (do (shen.bindv V2137 list V2449) (let Result (let V2140 (shen.lazyderef (tl V2136) V2449) (if (cons? V2140) (let A (hd V2140) (let V2141 (shen.lazyderef (tl V2140) V2449) (if (= () V2141) (do (shen.incinfs) (thaw V2450)) (if (shen.pvar? V2141) (do (shen.bindv V2141 () V2449) (let Result (do (shen.incinfs) (thaw V2450)) (do (shen.unbindv V2141 V2449) Result))) false)))) (if (shen.pvar? V2140) (let A (shen.newpv V2449) (do (shen.bindv V2140 (cons A ()) V2449) (let Result (do (shen.incinfs) (thaw V2450)) (do (shen.unbindv V2140 V2449) Result)))) false))) (do (shen.unbindv V2137 V2449) Result))) false))) (if (shen.pvar? V2136) (let A (shen.newpv V2449) (do (shen.bindv V2136 (cons list (cons A ())) V2449) (let Result (do (shen.incinfs) (thaw V2450)) (do (shen.unbindv V2136 V2449) Result)))) false))) false)) Case)) Case)) Case)) Case)))

(defun shen.by_hypothesis (V2456 V2457 V2458 V2459 V2460) (let Case (let V2122 (shen.lazyderef V2458 V2459) (if (cons? V2122) (let V2123 (shen.lazyderef (hd V2122) V2459) (if (cons? V2123) (let Y (hd V2123) (let V2124 (shen.lazyderef (tl V2123) V2459) (if (cons? V2124) (let V2125 (shen.lazyderef (hd V2124) V2459) (if (= : V2125) (let V2126 (shen.lazyderef (tl V2124) V2459) (if (cons? V2126) (let B (hd V2126) (let V2127 (shen.lazyderef (tl V2126) V2459) (if (= () V2127) (do (shen.incinfs) (identical V2456 Y V2459 (freeze (unify! V2457 B V2459 V2460)))) false))) false)) false)) false))) false)) false)) (if (= Case false) (let V2128 (shen.lazyderef V2458 V2459) (if (cons? V2128) (let Hyp (tl V2128) (do (shen.incinfs) (shen.by_hypothesis V2456 V2457 Hyp V2459 V2460))) false)) Case)))

(defun shen.t*-def (V2466 V2467 V2468 V2469 V2470) (let V2116 (shen.lazyderef V2466 V2469) (if (cons? V2116) (let V2117 (shen.lazyderef (hd V2116) V2469) (if (= define V2117) (let V2118 (shen.lazyderef (tl V2116) V2469) (if (cons? V2118) (let F (hd V2118) (let X (tl V2118) (let Y (shen.newpv V2469) (let E (shen.newpv V2469) (do (shen.incinfs) (shen.t*-defh (compile (lambda Y (shen.<sig+rules> Y)) X (lambda E (if (cons? E) (simple-error (cn "parse error here: " (shen.app E "
" shen.s))) (simple-error "parse error
")))) F V2467 V2468 V2469 V2470)))))) false)) false)) false)))

(defun shen.t*-defh (V2477 V2478 V2479 V2480 V2481 V2482) (let V2112 (shen.lazyderef V2477 V2481) (if (cons? V2112) (let Sig (hd V2112) (let Rules (tl V2112) (do (shen.incinfs) (shen.t*-defhh Sig (shen.ue-sig Sig) V2478 V2479 V2480 Rules V2481 V2482)))) false)))

(defun shen.t*-defhh (V2491 V2492 V2493 V2494 V2495 V2496 V2497 V2498) (do (shen.incinfs) (shen.t*-rules V2496 V2492 1 V2493 (cons (cons V2493 (cons : (cons V2492 ()))) V2495) V2497 (freeze (shen.memo V2493 V2491 V2494 V2497 V2498)))))

(defun shen.memo (V2504 V2505 V2506 V2507 V2508) (let Jnk (shen.newpv V2507) (do (shen.incinfs) (unify! V2506 V2505 V2507 (freeze (bind Jnk (declare (shen.lazyderef V2504 V2507) (shen.lazyderef V2506 V2507)) V2507 V2508))))))

(defun shen.<sig+rules> (V2510) (let Parse_shen.<signature> (shen.<signature> V2510) (if (not (= (fail) Parse_shen.<signature>)) (let Parse_shen.<non-ll-rules> (shen.<non-ll-rules> Parse_shen.<signature>) (if (not (= (fail) Parse_shen.<non-ll-rules>)) (shen.pair (hd Parse_shen.<non-ll-rules>) (cons (shen.hdtl Parse_shen.<signature>) (shen.hdtl Parse_shen.<non-ll-rules>))) (fail))) (fail))))

(defun shen.<non-ll-rules> (V2512) (let YaccParse (let Parse_shen.<rule> (shen.<rule> V2512) (if (not (= (fail) Parse_shen.<rule>)) (let Parse_shen.<non-ll-rules> (shen.<non-ll-rules> Parse_shen.<rule>) (if (not (= (fail) Parse_shen.<non-ll-rules>)) (shen.pair (hd Parse_shen.<non-ll-rules>) (cons (shen.hdtl Parse_shen.<rule>) (shen.hdtl Parse_shen.<non-ll-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<rule> (shen.<rule> V2512) (if (not (= (fail) Parse_shen.<rule>)) (shen.pair (hd Parse_shen.<rule>) (cons (shen.hdtl Parse_shen.<rule>) ())) (fail))) YaccParse)))

(defun shen.ue (V2514) (cond ((and (cons? V2514) (and (cons? (tl V2514)) (and (= () (tl (tl V2514))) (= (hd V2514) protect)))) V2514) ((cons? V2514) (map (lambda Z (shen.ue Z)) V2514)) ((variable? V2514) (concat && V2514)) (true V2514)))

(defun shen.ue-sig (V2516) (cond ((cons? V2516) (map (lambda Z (shen.ue-sig Z)) V2516)) ((variable? V2516) (concat &&& V2516)) (true V2516)))

(defun shen.ues (V2522) (cond ((shen.ue? V2522) (cons V2522 ())) ((cons? V2522) (union (shen.ues (hd V2522)) (shen.ues (tl V2522)))) (true ())))

(defun shen.ue? (V2524) (and (symbol? V2524) (shen.ue-h? (str V2524))))

(defun shen.ue-h? (V2532) (cond ((and (shen.+string? V2532) (and (= "&" (pos V2532 0)) (and (shen.+string? (tlstr V2532)) (= "&" (pos (tlstr V2532) 0))))) true) (true false)))

(defun shen.t*-rules (V2540 V2541 V2542 V2543 V2544 V2545 V2546) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (let V2096 (shen.lazyderef V2540 V2545) (if (= () V2096) (do (shen.incinfs) (thaw V2546)) false)) (if (= Case false) (let Case (let V2097 (shen.lazyderef V2540 V2545) (if (cons? V2097) (let Rule (hd V2097) (let Rules (tl V2097) (do (shen.incinfs) (shen.t*-rule (shen.ue Rule) V2541 V2544 V2545 (freeze (cut Throwcontrol V2545 (freeze (shen.t*-rules Rules V2541 (+ V2542 1) V2543 V2544 V2545 V2546)))))))) false)) (if (= Case false) (let Err (shen.newpv V2545) (do (shen.incinfs) (bind Err (simple-error (cn "type error in rule " (shen.app (shen.lazyderef V2542 V2545) (cn " of " (shen.app (shen.lazyderef V2543 V2545) "" shen.a)) shen.a))) V2545 V2546))) Case)) Case)))))

(defun shen.t*-rule (V2552 V2553 V2554 V2555 V2556) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let V2088 (shen.lazyderef V2552 V2555) (if (cons? V2088) (let Patterns (hd V2088) (let V2089 (shen.lazyderef (tl V2088) V2555) (if (cons? V2089) (let Action (hd V2089) (let V2090 (shen.lazyderef (tl V2089) V2555) (if (= () V2090) (let NewHyps (shen.newpv V2555) (do (shen.incinfs) (shen.newhyps (shen.placeholders Patterns) V2554 NewHyps V2555 (freeze (shen.t*-patterns Patterns V2553 NewHyps V2555 (freeze (cut Throwcontrol V2555 (freeze (shen.t*-action (shen.curry (shen.ue Action)) (shen.result-type Patterns V2553) (shen.patthyps Patterns V2553 V2554) V2555 V2556))))))))) false))) false))) false)))))

(defun shen.placeholders (V2562) (cond ((shen.ue? V2562) (cons V2562 ())) ((cons? V2562) (union (shen.placeholders (hd V2562)) (shen.placeholders (tl V2562)))) (true ())))

(defun shen.newhyps (V2568 V2569 V2570 V2571 V2572) (let Case (let V2075 (shen.lazyderef V2568 V2571) (if (= () V2075) (do (shen.incinfs) (unify! V2570 V2569 V2571 V2572)) false)) (if (= Case false) (let V2076 (shen.lazyderef V2568 V2571) (if (cons? V2076) (let V2071 (hd V2076) (let Vs (tl V2076) (let V2077 (shen.lazyderef V2570 V2571) (if (cons? V2077) (let V2078 (shen.lazyderef (hd V2077) V2571) (if (cons? V2078) (let V (hd V2078) (let V2079 (shen.lazyderef (tl V2078) V2571) (if (cons? V2079) (let V2080 (shen.lazyderef (hd V2079) V2571) (if (= : V2080) (let V2081 (shen.lazyderef (tl V2079) V2571) (if (cons? V2081) (let A (hd V2081) (let V2082 (shen.lazyderef (tl V2081) V2571) (if (= () V2082) (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (if (shen.pvar? V2082) (do (shen.bindv V2082 () V2571) (let Result (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (do (shen.unbindv V2082 V2571) Result))) false)))) (if (shen.pvar? V2081) (let A (shen.newpv V2571) (do (shen.bindv V2081 (cons A ()) V2571) (let Result (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (do (shen.unbindv V2081 V2571) Result)))) false))) (if (shen.pvar? V2080) (do (shen.bindv V2080 : V2571) (let Result (let V2083 (shen.lazyderef (tl V2079) V2571) (if (cons? V2083) (let A (hd V2083) (let V2084 (shen.lazyderef (tl V2083) V2571) (if (= () V2084) (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (if (shen.pvar? V2084) (do (shen.bindv V2084 () V2571) (let Result (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (do (shen.unbindv V2084 V2571) Result))) false)))) (if (shen.pvar? V2083) (let A (shen.newpv V2571) (do (shen.bindv V2083 (cons A ()) V2571) (let Result (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (do (shen.unbindv V2083 V2571) Result)))) false))) (do (shen.unbindv V2080 V2571) Result))) false))) (if (shen.pvar? V2079) (let A (shen.newpv V2571) (do (shen.bindv V2079 (cons : (cons A ())) V2571) (let Result (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (do (shen.unbindv V2079 V2571) Result)))) false)))) (if (shen.pvar? V2078) (let V (shen.newpv V2571) (let A (shen.newpv V2571) (do (shen.bindv V2078 (cons V (cons : (cons A ()))) V2571) (let Result (let NewHyp (tl V2077) (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572))))) (do (shen.unbindv V2078 V2571) Result))))) false))) (if (shen.pvar? V2077) (let V (shen.newpv V2571) (let A (shen.newpv V2571) (let NewHyp (shen.newpv V2571) (do (shen.bindv V2077 (cons (cons V (cons : (cons A ()))) NewHyp) V2571) (let Result (do (shen.incinfs) (unify! V V2071 V2571 (freeze (shen.newhyps Vs V2569 NewHyp V2571 V2572)))) (do (shen.unbindv V2077 V2571) Result)))))) false))))) false)) Case)))

(defun shen.patthyps (V2578 V2579 V2580) (cond ((= () V2578) V2580) ((and (cons? V2578) (and (cons? V2579) (and (cons? (tl V2579)) (and (= --> (hd (tl V2579))) (and (cons? (tl (tl V2579))) (= () (tl (tl (tl V2579))))))))) (adjoin (cons (hd V2578) (cons : (cons (hd V2579) ()))) (shen.patthyps (tl V2578) (hd (tl (tl V2579))) V2580))) (true (shen.f_error shen.patthyps))))

(defun shen.result-type (V2587 V2588) (cond ((and (= () V2587) (and (cons? V2588) (and (= --> (hd V2588)) (and (cons? (tl V2588)) (= () (tl (tl V2588))))))) (hd (tl V2588))) ((= () V2587) V2588) ((and (cons? V2587) (and (cons? V2588) (and (cons? (tl V2588)) (and (= --> (hd (tl V2588))) (and (cons? (tl (tl V2588))) (= () (tl (tl (tl V2588))))))))) (shen.result-type (tl V2587) (hd (tl (tl V2588))))) (true (shen.f_error shen.result-type))))

(defun shen.t*-patterns (V2594 V2595 V2596 V2597 V2598) (let Case (let V2063 (shen.lazyderef V2594 V2597) (if (= () V2063) (do (shen.incinfs) (thaw V2598)) false)) (if (= Case false) (let V2064 (shen.lazyderef V2594 V2597) (if (cons? V2064) (let Pattern (hd V2064) (let Patterns (tl V2064) (let V2065 (shen.lazyderef V2595 V2597) (if (cons? V2065) (let A (hd V2065) (let V2066 (shen.lazyderef (tl V2065) V2597) (if (cons? V2066) (let V2067 (shen.lazyderef (hd V2066) V2597) (if (= --> V2067) (let V2068 (shen.lazyderef (tl V2066) V2597) (if (cons? V2068) (let B (hd V2068) (let V2069 (shen.lazyderef (tl V2068) V2597) (if (= () V2069) (do (shen.incinfs) (shen.t* (cons Pattern (cons : (cons A ()))) V2596 V2597 (freeze (shen.t*-patterns Patterns B V2596 V2597 V2598)))) false))) false)) false)) false))) false)))) false)) Case)))

(defun shen.t*-action (V2604 V2605 V2606 V2607 V2608) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (let V2040 (shen.lazyderef V2604 V2607) (if (cons? V2040) (let V2041 (shen.lazyderef (hd V2040) V2607) (if (= where V2041) (let V2042 (shen.lazyderef (tl V2040) V2607) (if (cons? V2042) (let P (hd V2042) (let V2043 (shen.lazyderef (tl V2042) V2607) (if (cons? V2043) (let Action (hd V2043) (let V2044 (shen.lazyderef (tl V2043) V2607) (if (= () V2044) (do (shen.incinfs) (cut Throwcontrol V2607 (freeze (shen.t* (cons P (cons : (cons boolean ()))) V2606 V2607 (freeze (cut Throwcontrol V2607 (freeze (shen.t*-action Action V2605 (cons (cons P (cons : (cons verified ()))) V2606) V2607 V2608)))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2045 (shen.lazyderef V2604 V2607) (if (cons? V2045) (let V2046 (shen.lazyderef (hd V2045) V2607) (if (= shen.choicepoint! V2046) (let V2047 (shen.lazyderef (tl V2045) V2607) (if (cons? V2047) (let V2048 (shen.lazyderef (hd V2047) V2607) (if (cons? V2048) (let V2049 (shen.lazyderef (hd V2048) V2607) (if (cons? V2049) (let V2050 (shen.lazyderef (hd V2049) V2607) (if (= fail-if V2050) (let V2051 (shen.lazyderef (tl V2049) V2607) (if (cons? V2051) (let F (hd V2051) (let V2052 (shen.lazyderef (tl V2051) V2607) (if (= () V2052) (let V2053 (shen.lazyderef (tl V2048) V2607) (if (cons? V2053) (let Action (hd V2053) (let V2054 (shen.lazyderef (tl V2053) V2607) (if (= () V2054) (let V2055 (shen.lazyderef (tl V2047) V2607) (if (= () V2055) (do (shen.incinfs) (cut Throwcontrol V2607 (freeze (shen.t*-action (cons where (cons (cons not (cons (cons F (cons Action ())) ())) (cons Action ()))) V2605 V2606 V2607 V2608)))) false)) false))) false)) false))) false)) false)) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2056 (shen.lazyderef V2604 V2607) (if (cons? V2056) (let V2057 (shen.lazyderef (hd V2056) V2607) (if (= shen.choicepoint! V2057) (let V2058 (shen.lazyderef (tl V2056) V2607) (if (cons? V2058) (let Action (hd V2058) (let V2059 (shen.lazyderef (tl V2058) V2607) (if (= () V2059) (do (shen.incinfs) (cut Throwcontrol V2607 (freeze (shen.t*-action (cons where (cons (cons not (cons (cons (cons = (cons Action ())) (cons (cons fail ()) ())) ())) (cons Action ()))) V2605 V2606 V2607 V2608)))) false))) false)) false)) false)) (if (= Case false) (do (shen.incinfs) (shen.t* (cons V2604 (cons : (cons V2605 ()))) V2606 V2607 V2608)) Case)) Case)) Case)))))

(defun findall (V2614 V2615 V2616 V2617 V2618) (let B (shen.newpv V2617) (let A (shen.newpv V2617) (do (shen.incinfs) (bind A (gensym shen.a) V2617 (freeze (bind B (set (shen.lazyderef A V2617) ()) V2617 (freeze (shen.findallhelp V2614 V2615 V2616 A V2617 V2618)))))))))

(defun shen.findallhelp (V2625 V2626 V2627 V2628 V2629 V2630) (let Case (do (shen.incinfs) (call V2626 V2629 (freeze (shen.remember V2628 V2625 V2629 (freeze (fwhen false V2629 V2630)))))) (if (= Case false) (do (shen.incinfs) (bind V2627 (value (shen.lazyderef V2628 V2629)) V2629 V2630)) Case)))

(defun shen.remember (V2635 V2636 V2637 V2638) (let B (shen.newpv V2637) (do (shen.incinfs) (bind B (set (shen.deref V2635 V2637) (cons (shen.deref V2636 V2637) (value (shen.deref V2635 V2637)))) V2637 V2638))))




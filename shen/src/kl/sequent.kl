"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun shen.datatype-error (V1280) (cond ((and (cons? V1280) (and (cons? (tl V1280)) (= () (tl (tl V1280))))) (simple-error (cn "datatype syntax error here:

 " (shen.app (shen.next-50 50 (hd V1280)) "
" shen.a)))) (true (shen.f_error shen.datatype-error))))

(defun shen.<datatype-rules> (V1282) (let YaccParse (let Parse_shen.<datatype-rule> (shen.<datatype-rule> V1282) (if (not (= (fail) Parse_shen.<datatype-rule>)) (let Parse_shen.<datatype-rules> (shen.<datatype-rules> Parse_shen.<datatype-rule>) (if (not (= (fail) Parse_shen.<datatype-rules>)) (shen.pair (hd Parse_shen.<datatype-rules>) (cons (shen.hdtl Parse_shen.<datatype-rule>) (shen.hdtl Parse_shen.<datatype-rules>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1282) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<datatype-rule> (V1284) (let YaccParse (let Parse_shen.<side-conditions> (shen.<side-conditions> V1284) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<singleunderline> (shen.<singleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<singleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<singleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.single (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<side-conditions> (shen.<side-conditions> V1284) (if (not (= (fail) Parse_shen.<side-conditions>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<side-conditions>) (if (not (= (fail) Parse_shen.<premises>)) (let Parse_shen.<doubleunderline> (shen.<doubleunderline> Parse_shen.<premises>) (if (not (= (fail) Parse_shen.<doubleunderline>)) (let Parse_shen.<conclusion> (shen.<conclusion> Parse_shen.<doubleunderline>) (if (not (= (fail) Parse_shen.<conclusion>)) (shen.pair (hd Parse_shen.<conclusion>) (shen.sequent shen.double (cons (shen.hdtl Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<conclusion>) ()))))) (fail))) (fail))) (fail))) (fail))) YaccParse)))

(defun shen.<side-conditions> (V1286) (let YaccParse (let Parse_shen.<side-condition> (shen.<side-condition> V1286) (if (not (= (fail) Parse_shen.<side-condition>)) (let Parse_shen.<side-conditions> (shen.<side-conditions> Parse_shen.<side-condition>) (if (not (= (fail) Parse_shen.<side-conditions>)) (shen.pair (hd Parse_shen.<side-conditions>) (cons (shen.hdtl Parse_shen.<side-condition>) (shen.hdtl Parse_shen.<side-conditions>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1286) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<side-condition> (V1288) (let YaccParse (if (and (cons? (hd V1288)) (= if (hd (hd V1288)))) (let Parse_shen.<expr> (shen.<expr> (shen.pair (tl (hd V1288)) (shen.hdtl V1288))) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons if (cons (shen.hdtl Parse_shen.<expr>) ()))) (fail))) (fail)) (if (= YaccParse (fail)) (if (and (cons? (hd V1288)) (= let (hd (hd V1288)))) (let Parse_shen.<variable?> (shen.<variable?> (shen.pair (tl (hd V1288)) (shen.hdtl V1288))) (if (not (= (fail) Parse_shen.<variable?>)) (let Parse_shen.<expr> (shen.<expr> Parse_shen.<variable?>) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (cons let (cons (shen.hdtl Parse_shen.<variable?>) (cons (shen.hdtl Parse_shen.<expr>) ())))) (fail))) (fail))) (fail)) YaccParse)))

(defun shen.<variable?> (V1290) (if (cons? (hd V1290)) (let Parse_X (hd (hd V1290)) (if (variable? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1290)) (shen.hdtl V1290))) Parse_X) (fail))) (fail)))

(defun shen.<expr> (V1292) (if (cons? (hd V1292)) (let Parse_X (hd (hd V1292)) (if (not (or (element? Parse_X (cons >> (cons ; ()))) (or (shen.singleunderline? Parse_X) (shen.doubleunderline? Parse_X)))) (shen.pair (hd (shen.pair (tl (hd V1292)) (shen.hdtl V1292))) (shen.remove-bar Parse_X)) (fail))) (fail)))

(defun shen.remove-bar (V1294) (cond ((and (cons? V1294) (and (cons? (tl V1294)) (and (cons? (tl (tl V1294))) (and (= () (tl (tl (tl V1294)))) (= (hd (tl V1294)) bar!))))) (cons (hd V1294) (hd (tl (tl V1294))))) ((cons? V1294) (cons (shen.remove-bar (hd V1294)) (shen.remove-bar (tl V1294)))) (true V1294)))

(defun shen.<premises> (V1296) (let YaccParse (let Parse_shen.<premise> (shen.<premise> V1296) (if (not (= (fail) Parse_shen.<premise>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<premise>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (let Parse_shen.<premises> (shen.<premises> Parse_shen.<semicolon-symbol>) (if (not (= (fail) Parse_shen.<premises>)) (shen.pair (hd Parse_shen.<premises>) (cons (shen.hdtl Parse_shen.<premise>) (shen.hdtl Parse_shen.<premises>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1296) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<semicolon-symbol> (V1298) (if (cons? (hd V1298)) (let Parse_X (hd (hd V1298)) (if (= Parse_X ;) (shen.pair (hd (shen.pair (tl (hd V1298)) (shen.hdtl V1298))) shen.skip) (fail))) (fail)))

(defun shen.<premise> (V1300) (let YaccParse (if (and (cons? (hd V1300)) (= ! (hd (hd V1300)))) (shen.pair (hd (shen.pair (tl (hd V1300)) (shen.hdtl V1300))) !) (fail)) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1300) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1300) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) YaccParse)) YaccParse)))

(defun shen.<conclusion> (V1302) (let YaccParse (let Parse_shen.<formulae> (shen.<formulae> V1302) (if (not (= (fail) Parse_shen.<formulae>)) (if (and (cons? (hd Parse_shen.<formulae>)) (= >> (hd (hd Parse_shen.<formulae>)))) (let Parse_shen.<formula> (shen.<formula> (shen.pair (tl (hd Parse_shen.<formulae>)) (shen.hdtl Parse_shen.<formulae>))) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent (shen.hdtl Parse_shen.<formulae>) (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<formula> (shen.<formula> V1302) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<semicolon-symbol> (shen.<semicolon-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<semicolon-symbol>)) (shen.pair (hd Parse_shen.<semicolon-symbol>) (shen.sequent () (shen.hdtl Parse_shen.<formula>))) (fail))) (fail))) YaccParse)))

(defun shen.sequent (V1305 V1306) (@p V1305 V1306))

(defun shen.<formulae> (V1308) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1308) (if (not (= (fail) Parse_shen.<formula>)) (let Parse_shen.<comma-symbol> (shen.<comma-symbol> Parse_shen.<formula>) (if (not (= (fail) Parse_shen.<comma-symbol>)) (let Parse_shen.<formulae> (shen.<formulae> Parse_shen.<comma-symbol>) (if (not (= (fail) Parse_shen.<formulae>)) (shen.pair (hd Parse_shen.<formulae>) (cons (shen.hdtl Parse_shen.<formula>) (shen.hdtl Parse_shen.<formulae>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<formula> (shen.<formula> V1308) (if (not (= (fail) Parse_shen.<formula>)) (shen.pair (hd Parse_shen.<formula>) (cons (shen.hdtl Parse_shen.<formula>) ())) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1308) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)))

(defun shen.<comma-symbol> (V1310) (if (cons? (hd V1310)) (let Parse_X (hd (hd V1310)) (if (= Parse_X (intern ",")) (shen.pair (hd (shen.pair (tl (hd V1310)) (shen.hdtl V1310))) shen.skip) (fail))) (fail)))

(defun shen.<formula> (V1312) (let YaccParse (let Parse_shen.<expr> (shen.<expr> V1312) (if (not (= (fail) Parse_shen.<expr>)) (if (and (cons? (hd Parse_shen.<expr>)) (= : (hd (hd Parse_shen.<expr>)))) (let Parse_shen.<type> (shen.<type> (shen.pair (tl (hd Parse_shen.<expr>)) (shen.hdtl Parse_shen.<expr>))) (if (not (= (fail) Parse_shen.<type>)) (shen.pair (hd Parse_shen.<type>) (cons (shen.curry (shen.hdtl Parse_shen.<expr>)) (cons : (cons (shen.demodulate (shen.hdtl Parse_shen.<type>)) ())))) (fail))) (fail)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<expr> (shen.<expr> V1312) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.hdtl Parse_shen.<expr>)) (fail))) YaccParse)))

(defun shen.<type> (V1314) (let Parse_shen.<expr> (shen.<expr> V1314) (if (not (= (fail) Parse_shen.<expr>)) (shen.pair (hd Parse_shen.<expr>) (shen.curry-type (shen.hdtl Parse_shen.<expr>))) (fail))))

(defun shen.<doubleunderline> (V1316) (if (cons? (hd V1316)) (let Parse_X (hd (hd V1316)) (if (shen.doubleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1316)) (shen.hdtl V1316))) Parse_X) (fail))) (fail)))

(defun shen.<singleunderline> (V1318) (if (cons? (hd V1318)) (let Parse_X (hd (hd V1318)) (if (shen.singleunderline? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1318)) (shen.hdtl V1318))) Parse_X) (fail))) (fail)))

(defun shen.singleunderline? (V1320) (and (symbol? V1320) (shen.sh? (str V1320))))

(defun shen.sh? (V1322) (cond ((= "_" V1322) true) (true (and (= (pos V1322 0) "_") (shen.sh? (tlstr V1322))))))

(defun shen.doubleunderline? (V1324) (and (symbol? V1324) (shen.dh? (str V1324))))

(defun shen.dh? (V1326) (cond ((= "=" V1326) true) (true (and (= (pos V1326 0) "=") (shen.dh? (tlstr V1326))))))

(defun shen.process-datatype (V1329 V1330) (shen.remember-datatype (shen.s-prolog (shen.rules->horn-clauses V1329 V1330))))

(defun shen.remember-datatype (V1336) (cond ((cons? V1336) (do (set shen.*datatypes* (adjoin (hd V1336) (value shen.*datatypes*))) (do (set shen.*alldatatypes* (adjoin (hd V1336) (value shen.*alldatatypes*))) (hd V1336)))) (true (shen.f_error shen.remember-datatype))))

(defun shen.rules->horn-clauses (V1341 V1342) (cond ((= () V1342) ()) ((and (cons? V1342) (and (tuple? (hd V1342)) (= shen.single (fst (hd V1342))))) (cons (shen.rule->horn-clause V1341 (snd (hd V1342))) (shen.rules->horn-clauses V1341 (tl V1342)))) ((and (cons? V1342) (and (tuple? (hd V1342)) (= shen.double (fst (hd V1342))))) (shen.rules->horn-clauses V1341 (append (shen.double->singles (snd (hd V1342))) (tl V1342)))) (true (shen.f_error shen.rules->horn-clauses))))

(defun shen.double->singles (V1344) (cons (shen.right-rule V1344) (cons (shen.left-rule V1344) ())))

(defun shen.right-rule (V1346) (@p shen.single V1346))

(defun shen.left-rule (V1348) (cond ((and (cons? V1348) (and (cons? (tl V1348)) (and (cons? (tl (tl V1348))) (and (tuple? (hd (tl (tl V1348)))) (and (= () (fst (hd (tl (tl V1348))))) (= () (tl (tl (tl V1348))))))))) (let Q (gensym Qv) (let NewConclusion (@p (cons (snd (hd (tl (tl V1348)))) ()) Q) (let NewPremises (cons (@p (map (lambda X (shen.right->left X)) (hd (tl V1348))) Q) ()) (@p shen.single (cons (hd V1348) (cons NewPremises (cons NewConclusion ())))))))) (true (shen.f_error shen.left-rule))))

(defun shen.right->left (V1354) (cond ((and (tuple? V1354) (= () (fst V1354))) (snd V1354)) (true (simple-error "syntax error with ==========
"))))

(defun shen.rule->horn-clause (V1357 V1358) (cond ((and (cons? V1358) (and (cons? (tl V1358)) (and (cons? (tl (tl V1358))) (and (tuple? (hd (tl (tl V1358)))) (= () (tl (tl (tl V1358)))))))) (cons (shen.rule->horn-clause-head V1357 (snd (hd (tl (tl V1358))))) (cons :- (cons (shen.rule->horn-clause-body (hd V1358) (hd (tl V1358)) (fst (hd (tl (tl V1358))))) ())))) (true (shen.f_error shen.rule->horn-clause))))

(defun shen.rule->horn-clause-head (V1361 V1362) (cons V1361 (cons (shen.mode-ify V1362) (cons Context_1957 ()))))

(defun shen.mode-ify (V1364) (cond ((and (cons? V1364) (and (cons? (tl V1364)) (and (= : (hd (tl V1364))) (and (cons? (tl (tl V1364))) (= () (tl (tl (tl V1364)))))))) (cons mode (cons (cons (hd V1364) (cons : (cons (cons mode (cons (hd (tl (tl V1364))) (cons + ()))) ()))) (cons - ())))) (true V1364)))

(defun shen.rule->horn-clause-body (V1368 V1369 V1370) (let Variables (map (lambda X (shen.extract_vars X)) V1370) (let Predicates (map (lambda X (gensym shen.cl)) V1370) (let SearchLiterals (shen.construct-search-literals Predicates Variables Context_1957 Context1_1957) (let SearchClauses (shen.construct-search-clauses Predicates V1370 Variables) (let SideLiterals (shen.construct-side-literals V1368) (let PremissLiterals (map (lambda X (shen.construct-premiss-literal X (empty? V1370))) V1369) (append SearchLiterals (append SideLiterals PremissLiterals)))))))))

(defun shen.construct-search-literals (V1379 V1380 V1381 V1382) (cond ((and (= () V1379) (= () V1380)) ()) (true (shen.csl-help V1379 V1380 V1381 V1382))))

(defun shen.csl-help (V1389 V1390 V1391 V1392) (cond ((and (= () V1389) (= () V1390)) (cons (cons bind (cons ContextOut_1957 (cons V1391 ()))) ())) ((and (cons? V1389) (cons? V1390)) (cons (cons (hd V1389) (cons V1391 (cons V1392 (hd V1390)))) (shen.csl-help (tl V1389) (tl V1390) V1392 (gensym Context)))) (true (shen.f_error shen.csl-help))))

(defun shen.construct-search-clauses (V1396 V1397 V1398) (cond ((and (= () V1396) (and (= () V1397) (= () V1398))) shen.skip) ((and (cons? V1396) (and (cons? V1397) (cons? V1398))) (do (shen.construct-search-clause (hd V1396) (hd V1397) (hd V1398)) (shen.construct-search-clauses (tl V1396) (tl V1397) (tl V1398)))) (true (shen.f_error shen.construct-search-clauses))))

(defun shen.construct-search-clause (V1402 V1403 V1404) (shen.s-prolog (cons (shen.construct-base-search-clause V1402 V1403 V1404) (cons (shen.construct-recursive-search-clause V1402 V1403 V1404) ()))))

(defun shen.construct-base-search-clause (V1408 V1409 V1410) (cons (cons V1408 (cons (cons (shen.mode-ify V1409) In_1957) (cons In_1957 V1410))) (cons :- (cons () ()))))

(defun shen.construct-recursive-search-clause (V1414 V1415 V1416) (cons (cons V1414 (cons (cons Assumption_1957 Assumptions_1957) (cons (cons Assumption_1957 Out_1957) V1416))) (cons :- (cons (cons (cons V1414 (cons Assumptions_1957 (cons Out_1957 V1416))) ()) ()))))

(defun shen.construct-side-literals (V1422) (cond ((= () V1422) ()) ((and (cons? V1422) (and (cons? (hd V1422)) (and (= if (hd (hd V1422))) (and (cons? (tl (hd V1422))) (= () (tl (tl (hd V1422)))))))) (cons (cons when (tl (hd V1422))) (shen.construct-side-literals (tl V1422)))) ((and (cons? V1422) (and (cons? (hd V1422)) (and (= let (hd (hd V1422))) (and (cons? (tl (hd V1422))) (and (cons? (tl (tl (hd V1422)))) (= () (tl (tl (tl (hd V1422)))))))))) (cons (cons is (tl (hd V1422))) (shen.construct-side-literals (tl V1422)))) ((cons? V1422) (shen.construct-side-literals (tl V1422))) (true (shen.f_error shen.construct-side-literals))))

(defun shen.construct-premiss-literal (V1429 V1430) (cond ((tuple? V1429) (cons shen.t* (cons (shen.recursive_cons_form (snd V1429)) (cons (shen.construct-context V1430 (fst V1429)) ())))) ((= ! V1429) (cons cut (cons Throwcontrol ()))) (true (shen.f_error shen.construct-premiss-literal))))

(defun shen.construct-context (V1433 V1434) (cond ((and (= true V1433) (= () V1434)) Context_1957) ((and (= false V1433) (= () V1434)) ContextOut_1957) ((cons? V1434) (cons cons (cons (shen.recursive_cons_form (hd V1434)) (cons (shen.construct-context V1433 (tl V1434)) ())))) (true (shen.f_error shen.construct-context))))

(defun shen.recursive_cons_form (V1436) (cond ((cons? V1436) (cons cons (cons (shen.recursive_cons_form (hd V1436)) (cons (shen.recursive_cons_form (tl V1436)) ())))) (true V1436)))

(defun preclude (V1438) (shen.preclude-h (map (lambda X (shen.intern-type X)) V1438)))

(defun shen.preclude-h (V1440) (let FilterDatatypes (set shen.*datatypes* (difference (value shen.*datatypes*) V1440)) (value shen.*datatypes*)))

(defun include (V1442) (shen.include-h (map (lambda X (shen.intern-type X)) V1442)))

(defun shen.include-h (V1444) (let ValidTypes (intersection V1444 (value shen.*alldatatypes*)) (let NewDatatypes (set shen.*datatypes* (union ValidTypes (value shen.*datatypes*))) (value shen.*datatypes*))))

(defun preclude-all-but (V1446) (shen.preclude-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V1446))))

(defun include-all-but (V1448) (shen.include-h (difference (value shen.*alldatatypes*) (map (lambda X (shen.intern-type X)) V1448))))

(defun shen.synonyms-help (V1454) (cond ((= () V1454) (shen.update-demodulation-function (value shen.*tc*) (mapcan (lambda X (shen.demod-rule X)) (value shen.*synonyms*)))) ((and (cons? V1454) (cons? (tl V1454))) (let Vs (difference (shen.extract_vars (hd (tl V1454))) (shen.extract_vars (hd V1454))) (if (empty? Vs) (do (shen.pushnew (cons (hd V1454) (cons (hd (tl V1454)) ())) shen.*synonyms*) (shen.synonyms-help (tl (tl V1454)))) (shen.free_variable_warnings (hd (tl V1454)) Vs)))) (true (simple-error "odd number of synonyms
"))))

(defun shen.pushnew (V1457 V1458) (if (element? V1457 (value V1458)) (value V1458) (set V1458 (cons V1457 (value V1458)))))

(defun shen.demod-rule (V1460) (cond ((and (cons? V1460) (and (cons? (tl V1460)) (= () (tl (tl V1460))))) (cons (shen.rcons_form (hd V1460)) (cons -> (cons (shen.rcons_form (hd (tl V1460))) ())))) (true (shen.f_error shen.demod-rule))))

(defun shen.lambda-of-defun (V1466) (cond ((and (cons? V1466) (and (= defun (hd V1466)) (and (cons? (tl V1466)) (and (cons? (tl (tl V1466))) (and (cons? (hd (tl (tl V1466)))) (and (= () (tl (hd (tl (tl V1466))))) (and (cons? (tl (tl (tl V1466)))) (= () (tl (tl (tl (tl V1466)))))))))))) (eval (cons /. (cons (hd (hd (tl (tl V1466)))) (tl (tl (tl V1466))))))) (true (shen.f_error shen.lambda-of-defun))))

(defun shen.update-demodulation-function (V1469 V1470) (do (tc -) (do (set shen.*demodulation-function* (shen.lambda-of-defun (shen.elim-def (cons define (cons shen.demod (append V1470 (shen.default-rule))))))) (do (if V1469 (tc +) shen.skip) synonyms))))

(defun shen.default-rule () (cons X (cons -> (cons X ()))))




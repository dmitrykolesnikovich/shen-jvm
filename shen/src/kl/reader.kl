"Copyright (c) 2015, Mark Tarver

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of Mark Tarver may not be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY Mark Tarver ''AS IS'' AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Mark Tarver BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."

(defun read-char-code (V1003) (read-byte V1003))

(defun read-file-as-bytelist (V1005) (shen.read-file-as-Xlist V1005 (lambda S (read-byte S))))

(defun read-file-as-charlist (V1007) (shen.read-file-as-Xlist V1007 (lambda S (read-char-code S))))

(defun shen.read-file-as-Xlist (V1010 V1011) (let Stream (open V1010 in) (let X (V1011 Stream) (let Xs (shen.read-file-as-Xlist-help Stream V1011 X ()) (let Close (close Stream) (reverse Xs))))))

(defun shen.read-file-as-Xlist-help (V1016 V1017 V1018 V1019) (cond ((= -1 V1018) V1019) (true (shen.read-file-as-Xlist-help V1016 V1017 (V1017 V1016) (cons V1018 V1019)))))

(defun read-file-as-string (V1021) (let Stream (open V1021 in) (shen.rfas-h Stream (read-char-code Stream) "")))

(defun shen.rfas-h (V1025 V1026 V1027) (cond ((= -1 V1026) (do (close V1025) V1027)) (true (shen.rfas-h V1025 (read-char-code V1025) (cn V1027 (n->string V1026))))))

(defun input (V1029) (eval-kl (read V1029)))

(defun input+ (V1032 V1033) (let Mono? (shen.monotype V1032) (let Input (read V1033) (if (= false (shen.typecheck Input (shen.demodulate V1032))) (simple-error (cn "type error: " (shen.app Input (cn " is not of type " (shen.app V1032 "
" shen.r)) shen.r))) (eval-kl Input)))))

(defun shen.monotype (V1035) (cond ((cons? V1035) (map (lambda Z (shen.monotype Z)) V1035)) (true (if (variable? V1035) (simple-error (cn "input+ expects a monotype: not " (shen.app V1035 "
" shen.a))) V1035))))

(defun read (V1037) (hd (shen.read-loop V1037 (read-char-code V1037) ())))

(defun it () (value shen.*it*))

(defun shen.read-loop (V1045 V1046 V1047) (cond ((= 94 V1046) (simple-error "read aborted")) ((= -1 V1046) (if (empty? V1047) (simple-error "error: empty stream") (compile (lambda X (shen.<st_input> X)) V1047 (lambda E E)))) ((shen.terminator? V1046) (let AllChars (append V1047 (cons V1046 ())) (let It (shen.record-it AllChars) (let Read (compile (lambda X (shen.<st_input> X)) AllChars (lambda E shen.nextbyte)) (if (or (= Read shen.nextbyte) (empty? Read)) (shen.read-loop V1045 (read-char-code V1045) AllChars) Read))))) (true (shen.read-loop V1045 (read-char-code V1045) (append V1047 (cons V1046 ()))))))

(defun shen.terminator? (V1049) (element? V1049 (cons 9 (cons 10 (cons 13 (cons 32 (cons 34 (cons 41 (cons 93 ())))))))))

(defun lineread (V1051) (shen.lineread-loop (read-char-code V1051) () V1051))

(defun shen.lineread-loop (V1056 V1057 V1058) (cond ((= -1 V1056) (if (empty? V1057) (simple-error "empty stream") (compile (lambda X (shen.<st_input> X)) V1057 (lambda E E)))) ((= V1056 (shen.hat)) (simple-error "line read aborted")) ((element? V1056 (cons (shen.newline) (cons (shen.carriage-return) ()))) (let Line (compile (lambda X (shen.<st_input> X)) V1057 (lambda E shen.nextline)) (let It (shen.record-it V1057) (if (or (= Line shen.nextline) (empty? Line)) (shen.lineread-loop (read-char-code V1058) (append V1057 (cons V1056 ())) V1058) Line)))) (true (shen.lineread-loop (read-char-code V1058) (append V1057 (cons V1056 ())) V1058))))

(defun shen.record-it (V1060) (let TrimLeft (shen.trim-whitespace V1060) (let TrimRight (shen.trim-whitespace (reverse TrimLeft)) (let Trimmed (reverse TrimRight) (shen.record-it-h Trimmed)))))

(defun shen.trim-whitespace (V1062) (cond ((and (cons? V1062) (element? (hd V1062) (cons 9 (cons 10 (cons 13 (cons 32 ())))))) (shen.trim-whitespace (tl V1062))) (true V1062)))

(defun shen.record-it-h (V1064) (do (set shen.*it* (shen.cn-all (map (lambda X (n->string X)) V1064))) V1064))

(defun shen.cn-all (V1066) (cond ((= () V1066) "") ((cons? V1066) (cn (hd V1066) (shen.cn-all (tl V1066)))) (true (shen.f_error shen.cn-all))))

(defun read-file (V1068) (let Charlist (read-file-as-charlist V1068) (compile (lambda X (shen.<st_input> X)) Charlist (lambda X (shen.read-error X)))))

(defun read-from-string (V1070) (let Ns (map (lambda X (string->n X)) (explode V1070)) (compile (lambda X (shen.<st_input> X)) Ns (lambda X (shen.read-error X)))))

(defun shen.read-error (V1078) (cond ((and (cons? V1078) (and (cons? (hd V1078)) (and (cons? (tl V1078)) (= () (tl (tl V1078)))))) (simple-error (cn "read error here:

 " (shen.app (shen.compress-50 50 (hd V1078)) "
" shen.a)))) (true (simple-error "read error
"))))

(defun shen.compress-50 (V1085 V1086) (cond ((= () V1086) "") ((= 0 V1085) "") ((cons? V1086) (cn (n->string (hd V1086)) (shen.compress-50 (- V1085 1) (tl V1086)))) (true (shen.f_error shen.compress-50))))

(defun shen.<st_input> (V1088) (let YaccParse (let Parse_shen.<lsb> (shen.<lsb> V1088) (if (not (= (fail) Parse_shen.<lsb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lsb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rsb> (shen.<rsb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rsb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rsb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (cons (macroexpand (shen.cons_form (shen.hdtl Parse_shen.<st_input1>))) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lrb> (shen.<lrb> V1088) (if (not (= (fail) Parse_shen.<lrb>)) (let Parse_shen.<st_input1> (shen.<st_input1> Parse_shen.<lrb>) (if (not (= (fail) Parse_shen.<st_input1>)) (let Parse_shen.<rrb> (shen.<rrb> Parse_shen.<st_input1>) (if (not (= (fail) Parse_shen.<rrb>)) (let Parse_shen.<st_input2> (shen.<st_input2> Parse_shen.<rrb>) (if (not (= (fail) Parse_shen.<st_input2>)) (shen.pair (hd Parse_shen.<st_input2>) (shen.package-macro (macroexpand (shen.hdtl Parse_shen.<st_input1>)) (shen.hdtl Parse_shen.<st_input2>))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<lcurly> (shen.<lcurly> V1088) (if (not (= (fail) Parse_shen.<lcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<lcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons { (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<rcurly> (shen.<rcurly> V1088) (if (not (= (fail) Parse_shen.<rcurly>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<rcurly>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons } (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<bar> (shen.<bar> V1088) (if (not (= (fail) Parse_shen.<bar>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<bar>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons bar! (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<semicolon> (shen.<semicolon> V1088) (if (not (= (fail) Parse_shen.<semicolon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<semicolon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons ; (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1088) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<equal> (shen.<equal> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<equal>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<equal>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons := (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1088) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<minus> (shen.<minus> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons :- (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<colon> (shen.<colon> V1088) (if (not (= (fail) Parse_shen.<colon>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<colon>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons : (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comma> (shen.<comma> V1088) (if (not (= (fail) Parse_shen.<comma>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comma>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (intern ",") (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1088) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<atom> (shen.<atom> V1088) (if (not (= (fail) Parse_shen.<atom>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<atom>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (cons (macroexpand (shen.hdtl Parse_shen.<atom>)) (shen.hdtl Parse_shen.<st_input>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<whitespaces> (shen.<whitespaces> V1088) (if (not (= (fail) Parse_shen.<whitespaces>)) (let Parse_shen.<st_input> (shen.<st_input> Parse_shen.<whitespaces>) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1088) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<lsb> (V1090) (if (and (cons? (hd V1090)) (= 91 (hd (hd V1090)))) (shen.pair (hd (shen.pair (tl (hd V1090)) (shen.hdtl V1090))) shen.skip) (fail)))

(defun shen.<rsb> (V1092) (if (and (cons? (hd V1092)) (= 93 (hd (hd V1092)))) (shen.pair (hd (shen.pair (tl (hd V1092)) (shen.hdtl V1092))) shen.skip) (fail)))

(defun shen.<lcurly> (V1094) (if (and (cons? (hd V1094)) (= 123 (hd (hd V1094)))) (shen.pair (hd (shen.pair (tl (hd V1094)) (shen.hdtl V1094))) shen.skip) (fail)))

(defun shen.<rcurly> (V1096) (if (and (cons? (hd V1096)) (= 125 (hd (hd V1096)))) (shen.pair (hd (shen.pair (tl (hd V1096)) (shen.hdtl V1096))) shen.skip) (fail)))

(defun shen.<bar> (V1098) (if (and (cons? (hd V1098)) (= 124 (hd (hd V1098)))) (shen.pair (hd (shen.pair (tl (hd V1098)) (shen.hdtl V1098))) shen.skip) (fail)))

(defun shen.<semicolon> (V1100) (if (and (cons? (hd V1100)) (= 59 (hd (hd V1100)))) (shen.pair (hd (shen.pair (tl (hd V1100)) (shen.hdtl V1100))) shen.skip) (fail)))

(defun shen.<colon> (V1102) (if (and (cons? (hd V1102)) (= 58 (hd (hd V1102)))) (shen.pair (hd (shen.pair (tl (hd V1102)) (shen.hdtl V1102))) shen.skip) (fail)))

(defun shen.<comma> (V1104) (if (and (cons? (hd V1104)) (= 44 (hd (hd V1104)))) (shen.pair (hd (shen.pair (tl (hd V1104)) (shen.hdtl V1104))) shen.skip) (fail)))

(defun shen.<equal> (V1106) (if (and (cons? (hd V1106)) (= 61 (hd (hd V1106)))) (shen.pair (hd (shen.pair (tl (hd V1106)) (shen.hdtl V1106))) shen.skip) (fail)))

(defun shen.<minus> (V1108) (if (and (cons? (hd V1108)) (= 45 (hd (hd V1108)))) (shen.pair (hd (shen.pair (tl (hd V1108)) (shen.hdtl V1108))) shen.skip) (fail)))

(defun shen.<lrb> (V1110) (if (and (cons? (hd V1110)) (= 40 (hd (hd V1110)))) (shen.pair (hd (shen.pair (tl (hd V1110)) (shen.hdtl V1110))) shen.skip) (fail)))

(defun shen.<rrb> (V1112) (if (and (cons? (hd V1112)) (= 41 (hd (hd V1112)))) (shen.pair (hd (shen.pair (tl (hd V1112)) (shen.hdtl V1112))) shen.skip) (fail)))

(defun shen.<atom> (V1114) (let YaccParse (let Parse_shen.<str> (shen.<str> V1114) (if (not (= (fail) Parse_shen.<str>)) (shen.pair (hd Parse_shen.<str>) (shen.control-chars (shen.hdtl Parse_shen.<str>))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<number> (shen.<number> V1114) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<sym> (shen.<sym> V1114) (if (not (= (fail) Parse_shen.<sym>)) (shen.pair (hd Parse_shen.<sym>) (if (= (shen.hdtl Parse_shen.<sym>) "<>") (cons vector (cons 0 ())) (intern (shen.hdtl Parse_shen.<sym>)))) (fail))) YaccParse)) YaccParse)))

(defun shen.control-chars (V1116) (cond ((= () V1116) "") ((and (cons? V1116) (and (= "c" (hd V1116)) (and (cons? (tl V1116)) (= "#" (hd (tl V1116)))))) (let CodePoint (shen.code-point (tl (tl V1116))) (let AfterCodePoint (shen.after-codepoint (tl (tl V1116))) (@s (n->string (shen.decimalise CodePoint)) (shen.control-chars AfterCodePoint))))) ((cons? V1116) (@s (hd V1116) (shen.control-chars (tl V1116)))) (true (shen.f_error shen.control-chars))))

(defun shen.code-point (V1120) (cond ((and (cons? V1120) (= ";" (hd V1120))) "") ((and (cons? V1120) (element? (hd V1120) (cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" (cons "0" ()))))))))))))) (cons (hd V1120) (shen.code-point (tl V1120)))) (true (simple-error (cn "code point parse error " (shen.app V1120 "
" shen.a))))))

(defun shen.after-codepoint (V1126) (cond ((= () V1126) ()) ((and (cons? V1126) (= ";" (hd V1126))) (tl V1126)) ((cons? V1126) (shen.after-codepoint (tl V1126))) (true (shen.f_error shen.after-codepoint))))

(defun shen.decimalise (V1128) (shen.pre (reverse (shen.digits->integers V1128)) 0))

(defun shen.digits->integers (V1134) (cond ((and (cons? V1134) (= "0" (hd V1134))) (cons 0 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "1" (hd V1134))) (cons 1 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "2" (hd V1134))) (cons 2 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "3" (hd V1134))) (cons 3 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "4" (hd V1134))) (cons 4 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "5" (hd V1134))) (cons 5 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "6" (hd V1134))) (cons 6 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "7" (hd V1134))) (cons 7 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "8" (hd V1134))) (cons 8 (shen.digits->integers (tl V1134)))) ((and (cons? V1134) (= "9" (hd V1134))) (cons 9 (shen.digits->integers (tl V1134)))) (true ())))

(defun shen.<sym> (V1136) (let Parse_shen.<alpha> (shen.<alpha> V1136) (if (not (= (fail) Parse_shen.<alpha>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alpha>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))))

(defun shen.<alphanums> (V1138) (let YaccParse (let Parse_shen.<alphanum> (shen.<alphanum> V1138) (if (not (= (fail) Parse_shen.<alphanum>)) (let Parse_shen.<alphanums> (shen.<alphanums> Parse_shen.<alphanum>) (if (not (= (fail) Parse_shen.<alphanums>)) (shen.pair (hd Parse_shen.<alphanums>) (@s (shen.hdtl Parse_shen.<alphanum>) (shen.hdtl Parse_shen.<alphanums>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1138) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) "") (fail))) YaccParse)))

(defun shen.<alphanum> (V1140) (let YaccParse (let Parse_shen.<alpha> (shen.<alpha> V1140) (if (not (= (fail) Parse_shen.<alpha>)) (shen.pair (hd Parse_shen.<alpha>) (shen.hdtl Parse_shen.<alpha>)) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<num> (shen.<num> V1140) (if (not (= (fail) Parse_shen.<num>)) (shen.pair (hd Parse_shen.<num>) (shen.hdtl Parse_shen.<num>)) (fail))) YaccParse)))

(defun shen.<num> (V1142) (if (cons? (hd V1142)) (let Parse_Char (hd (hd V1142)) (if (shen.numbyte? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V1142)) (shen.hdtl V1142))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.numbyte? (V1148) (cond ((= 48 V1148) true) ((= 49 V1148) true) ((= 50 V1148) true) ((= 51 V1148) true) ((= 52 V1148) true) ((= 53 V1148) true) ((= 54 V1148) true) ((= 55 V1148) true) ((= 56 V1148) true) ((= 57 V1148) true) (true false)))

(defun shen.<alpha> (V1150) (if (cons? (hd V1150)) (let Parse_Char (hd (hd V1150)) (if (shen.symbol-code? Parse_Char) (shen.pair (hd (shen.pair (tl (hd V1150)) (shen.hdtl V1150))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.symbol-code? (V1152) (or (= V1152 126) (or (and (> V1152 94) (< V1152 123)) (or (and (> V1152 59) (< V1152 91)) (or (and (> V1152 41) (and (< V1152 58) (not (= V1152 44)))) (or (and (> V1152 34) (< V1152 40)) (= V1152 33)))))))

(defun shen.<str> (V1154) (let Parse_shen.<dbq> (shen.<dbq> V1154) (if (not (= (fail) Parse_shen.<dbq>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<dbq>) (if (not (= (fail) Parse_shen.<strcontents>)) (let Parse_shen.<dbq> (shen.<dbq> Parse_shen.<strcontents>) (if (not (= (fail) Parse_shen.<dbq>)) (shen.pair (hd Parse_shen.<dbq>) (shen.hdtl Parse_shen.<strcontents>)) (fail))) (fail))) (fail))))

(defun shen.<dbq> (V1156) (if (cons? (hd V1156)) (let Parse_Char (hd (hd V1156)) (if (= Parse_Char 34) (shen.pair (hd (shen.pair (tl (hd V1156)) (shen.hdtl V1156))) Parse_Char) (fail))) (fail)))

(defun shen.<strcontents> (V1158) (let YaccParse (let Parse_shen.<strc> (shen.<strc> V1158) (if (not (= (fail) Parse_shen.<strc>)) (let Parse_shen.<strcontents> (shen.<strcontents> Parse_shen.<strc>) (if (not (= (fail) Parse_shen.<strcontents>)) (shen.pair (hd Parse_shen.<strcontents>) (cons (shen.hdtl Parse_shen.<strc>) (shen.hdtl Parse_shen.<strcontents>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1158) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<byte> (V1160) (if (cons? (hd V1160)) (let Parse_Char (hd (hd V1160)) (shen.pair (hd (shen.pair (tl (hd V1160)) (shen.hdtl V1160))) (n->string Parse_Char))) (fail)))

(defun shen.<strc> (V1162) (if (cons? (hd V1162)) (let Parse_Char (hd (hd V1162)) (if (not (= Parse_Char 34)) (shen.pair (hd (shen.pair (tl (hd V1162)) (shen.hdtl V1162))) (n->string Parse_Char)) (fail))) (fail)))

(defun shen.<number> (V1164) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1164) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (- 0 (shen.hdtl Parse_shen.<number>))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<plus> (shen.<plus> V1164) (if (not (= (fail) Parse_shen.<plus>)) (let Parse_shen.<number> (shen.<number> Parse_shen.<plus>) (if (not (= (fail) Parse_shen.<number>)) (shen.pair (hd Parse_shen.<number>) (shen.hdtl Parse_shen.<number>)) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1164) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<postdigits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1)))) (fail))) (fail))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1164) (if (not (= (fail) Parse_shen.<digits>)) (let Parse_shen.<E> (shen.<E> Parse_shen.<digits>) (if (not (= (fail) Parse_shen.<E>)) (let Parse_shen.<log10> (shen.<log10> Parse_shen.<E>) (if (not (= (fail) Parse_shen.<log10>)) (shen.pair (hd Parse_shen.<log10>) (* (shen.expt 10 (shen.hdtl Parse_shen.<log10>)) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<predigits> (shen.<predigits> V1164) (if (not (= (fail) Parse_shen.<predigits>)) (let Parse_shen.<stop> (shen.<stop> Parse_shen.<predigits>) (if (not (= (fail) Parse_shen.<stop>)) (let Parse_shen.<postdigits> (shen.<postdigits> Parse_shen.<stop>) (if (not (= (fail) Parse_shen.<postdigits>)) (shen.pair (hd Parse_shen.<postdigits>) (+ (shen.pre (reverse (shen.hdtl Parse_shen.<predigits>)) 0) (shen.post (shen.hdtl Parse_shen.<postdigits>) 1))) (fail))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1164) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)) YaccParse)) YaccParse)) YaccParse)) YaccParse)))

(defun shen.<E> (V1166) (if (and (cons? (hd V1166)) (= 101 (hd (hd V1166)))) (shen.pair (hd (shen.pair (tl (hd V1166)) (shen.hdtl V1166))) shen.skip) (fail)))

(defun shen.<log10> (V1168) (let YaccParse (let Parse_shen.<minus> (shen.<minus> V1168) (if (not (= (fail) Parse_shen.<minus>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<minus>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (- 0 (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digits> (shen.<digits> V1168) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.pre (reverse (shen.hdtl Parse_shen.<digits>)) 0)) (fail))) YaccParse)))

(defun shen.<plus> (V1170) (if (cons? (hd V1170)) (let Parse_Char (hd (hd V1170)) (if (= Parse_Char 43) (shen.pair (hd (shen.pair (tl (hd V1170)) (shen.hdtl V1170))) Parse_Char) (fail))) (fail)))

(defun shen.<stop> (V1172) (if (cons? (hd V1172)) (let Parse_Char (hd (hd V1172)) (if (= Parse_Char 46) (shen.pair (hd (shen.pair (tl (hd V1172)) (shen.hdtl V1172))) Parse_Char) (fail))) (fail)))

(defun shen.<predigits> (V1174) (let YaccParse (let Parse_shen.<digits> (shen.<digits> V1174) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1174) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) ()) (fail))) YaccParse)))

(defun shen.<postdigits> (V1176) (let Parse_shen.<digits> (shen.<digits> V1176) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (shen.hdtl Parse_shen.<digits>)) (fail))))

(defun shen.<digits> (V1178) (let YaccParse (let Parse_shen.<digit> (shen.<digit> V1178) (if (not (= (fail) Parse_shen.<digit>)) (let Parse_shen.<digits> (shen.<digits> Parse_shen.<digit>) (if (not (= (fail) Parse_shen.<digits>)) (shen.pair (hd Parse_shen.<digits>) (cons (shen.hdtl Parse_shen.<digit>) (shen.hdtl Parse_shen.<digits>))) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<digit> (shen.<digit> V1178) (if (not (= (fail) Parse_shen.<digit>)) (shen.pair (hd Parse_shen.<digit>) (cons (shen.hdtl Parse_shen.<digit>) ())) (fail))) YaccParse)))

(defun shen.<digit> (V1180) (if (cons? (hd V1180)) (let Parse_X (hd (hd V1180)) (if (shen.numbyte? Parse_X) (shen.pair (hd (shen.pair (tl (hd V1180)) (shen.hdtl V1180))) (shen.byte->digit Parse_X)) (fail))) (fail)))

(defun shen.byte->digit (V1182) (cond ((= 48 V1182) 0) ((= 49 V1182) 1) ((= 50 V1182) 2) ((= 51 V1182) 3) ((= 52 V1182) 4) ((= 53 V1182) 5) ((= 54 V1182) 6) ((= 55 V1182) 7) ((= 56 V1182) 8) ((= 57 V1182) 9) (true (shen.f_error shen.byte->digit))))

(defun shen.pre (V1187 V1188) (cond ((= () V1187) 0) ((cons? V1187) (+ (* (shen.expt 10 V1188) (hd V1187)) (shen.pre (tl V1187) (+ V1188 1)))) (true (shen.f_error shen.pre))))

(defun shen.post (V1193 V1194) (cond ((= () V1193) 0) ((cons? V1193) (+ (* (shen.expt 10 (- 0 V1194)) (hd V1193)) (shen.post (tl V1193) (+ V1194 1)))) (true (shen.f_error shen.post))))

(defun shen.expt (V1199 V1200) (cond ((= 0 V1200) 1) ((> V1200 0) (* V1199 (shen.expt V1199 (- V1200 1)))) (true (* 1.0 (/ (shen.expt V1199 (+ V1200 1)) V1199)))))

(defun shen.<st_input1> (V1202) (let Parse_shen.<st_input> (shen.<st_input> V1202) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<st_input2> (V1204) (let Parse_shen.<st_input> (shen.<st_input> V1204) (if (not (= (fail) Parse_shen.<st_input>)) (shen.pair (hd Parse_shen.<st_input>) (shen.hdtl Parse_shen.<st_input>)) (fail))))

(defun shen.<comment> (V1206) (let YaccParse (let Parse_shen.<singleline> (shen.<singleline> V1206) (if (not (= (fail) Parse_shen.<singleline>)) (shen.pair (hd Parse_shen.<singleline>) shen.skip) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<multiline> (shen.<multiline> V1206) (if (not (= (fail) Parse_shen.<multiline>)) (shen.pair (hd Parse_shen.<multiline>) shen.skip) (fail))) YaccParse)))

(defun shen.<singleline> (V1208) (let Parse_shen.<backslash> (shen.<backslash> V1208) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<anysingle>)) (let Parse_shen.<return> (shen.<return> Parse_shen.<anysingle>) (if (not (= (fail) Parse_shen.<return>)) (shen.pair (hd Parse_shen.<return>) shen.skip) (fail))) (fail))) (fail))) (fail))))

(defun shen.<backslash> (V1210) (if (and (cons? (hd V1210)) (= 92 (hd (hd V1210)))) (shen.pair (hd (shen.pair (tl (hd V1210)) (shen.hdtl V1210))) shen.skip) (fail)))

(defun shen.<anysingle> (V1212) (let YaccParse (let Parse_shen.<non-return> (shen.<non-return> V1212) (if (not (= (fail) Parse_shen.<non-return>)) (let Parse_shen.<anysingle> (shen.<anysingle> Parse_shen.<non-return>) (if (not (= (fail) Parse_shen.<anysingle>)) (shen.pair (hd Parse_shen.<anysingle>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_<e> (<e> V1212) (if (not (= (fail) Parse_<e>)) (shen.pair (hd Parse_<e>) shen.skip) (fail))) YaccParse)))

(defun shen.<non-return> (V1214) (if (cons? (hd V1214)) (let Parse_X (hd (hd V1214)) (if (not (element? Parse_X (cons 10 (cons 13 ())))) (shen.pair (hd (shen.pair (tl (hd V1214)) (shen.hdtl V1214))) shen.skip) (fail))) (fail)))

(defun shen.<return> (V1216) (if (cons? (hd V1216)) (let Parse_X (hd (hd V1216)) (if (element? Parse_X (cons 10 (cons 13 ()))) (shen.pair (hd (shen.pair (tl (hd V1216)) (shen.hdtl V1216))) shen.skip) (fail))) (fail)))

(defun shen.<multiline> (V1218) (let Parse_shen.<backslash> (shen.<backslash> V1218) (if (not (= (fail) Parse_shen.<backslash>)) (let Parse_shen.<times> (shen.<times> Parse_shen.<backslash>) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (fail))))

(defun shen.<times> (V1220) (if (and (cons? (hd V1220)) (= 42 (hd (hd V1220)))) (shen.pair (hd (shen.pair (tl (hd V1220)) (shen.hdtl V1220))) shen.skip) (fail)))

(defun shen.<anymulti> (V1222) (let YaccParse (let Parse_shen.<comment> (shen.<comment> V1222) (if (not (= (fail) Parse_shen.<comment>)) (let Parse_shen.<anymulti> (shen.<anymulti> Parse_shen.<comment>) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let YaccParse (let Parse_shen.<times> (shen.<times> V1222) (if (not (= (fail) Parse_shen.<times>)) (let Parse_shen.<backslash> (shen.<backslash> Parse_shen.<times>) (if (not (= (fail) Parse_shen.<backslash>)) (shen.pair (hd Parse_shen.<backslash>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (if (cons? (hd V1222)) (let Parse_X (hd (hd V1222)) (let Parse_shen.<anymulti> (shen.<anymulti> (shen.pair (tl (hd V1222)) (shen.hdtl V1222))) (if (not (= (fail) Parse_shen.<anymulti>)) (shen.pair (hd Parse_shen.<anymulti>) shen.skip) (fail)))) (fail)) YaccParse)) YaccParse)))

(defun shen.<whitespaces> (V1224) (let YaccParse (let Parse_shen.<whitespace> (shen.<whitespace> V1224) (if (not (= (fail) Parse_shen.<whitespace>)) (let Parse_shen.<whitespaces> (shen.<whitespaces> Parse_shen.<whitespace>) (if (not (= (fail) Parse_shen.<whitespaces>)) (shen.pair (hd Parse_shen.<whitespaces>) shen.skip) (fail))) (fail))) (if (= YaccParse (fail)) (let Parse_shen.<whitespace> (shen.<whitespace> V1224) (if (not (= (fail) Parse_shen.<whitespace>)) (shen.pair (hd Parse_shen.<whitespace>) shen.skip) (fail))) YaccParse)))

(defun shen.<whitespace> (V1226) (if (cons? (hd V1226)) (let Parse_X (hd (hd V1226)) (if (let Parse_Case Parse_X (or (= Parse_Case 32) (or (= Parse_Case 13) (or (= Parse_Case 10) (= Parse_Case 9))))) (shen.pair (hd (shen.pair (tl (hd V1226)) (shen.hdtl V1226))) shen.skip) (fail))) (fail)))

(defun shen.cons_form (V1228) (cond ((= () V1228) ()) ((and (cons? V1228) (and (cons? (tl V1228)) (and (cons? (tl (tl V1228))) (and (= () (tl (tl (tl V1228)))) (= (hd (tl V1228)) bar!))))) (cons cons (cons (hd V1228) (tl (tl V1228))))) ((cons? V1228) (cons cons (cons (hd V1228) (cons (shen.cons_form (tl V1228)) ())))) (true (shen.f_error shen.cons_form))))

(defun shen.package-macro (V1233 V1234) (cond ((and (cons? V1233) (and (= $ (hd V1233)) (and (cons? (tl V1233)) (= () (tl (tl V1233)))))) (append (explode (hd (tl V1233))) V1234)) ((and (cons? V1233) (and (= package (hd V1233)) (and (cons? (tl V1233)) (and (= null (hd (tl V1233))) (cons? (tl (tl V1233))))))) (append (tl (tl (tl V1233))) V1234)) ((and (cons? V1233) (and (= package (hd V1233)) (and (cons? (tl V1233)) (cons? (tl (tl V1233)))))) (let ListofExceptions (shen.eval-without-macros (hd (tl (tl V1233)))) (let External (shen.record-exceptions ListofExceptions (hd (tl V1233))) (let PackageNameDot (intern (cn (str (hd (tl V1233))) ".")) (let ExpPackageNameDot (explode PackageNameDot) (let Packaged (shen.packageh PackageNameDot ListofExceptions (tl (tl (tl V1233))) ExpPackageNameDot) (let Internal (shen.record-internal (hd (tl V1233)) (shen.internal-symbols ExpPackageNameDot Packaged)) (append Packaged V1234)))))))) (true (cons V1233 V1234))))

(defun shen.record-exceptions (V1237 V1238) (let CurrExceptions (get/or V1238 shen.external-symbols (freeze ()) (value *property-vector*)) (let AllExceptions (union V1237 CurrExceptions) (put V1238 shen.external-symbols AllExceptions (value *property-vector*)))))

(defun shen.record-internal (V1241 V1242) (put V1241 shen.internal-symbols (union V1242 (get/or V1241 shen.internal-symbols (freeze ()) (value *property-vector*))) (value *property-vector*)))

(defun shen.internal-symbols (V1253 V1254) (cond ((and (symbol? V1254) (shen.prefix? V1253 (explode V1254))) (cons V1254 ())) ((cons? V1254) (union (shen.internal-symbols V1253 (hd V1254)) (shen.internal-symbols V1253 (tl V1254)))) (true ())))

(defun shen.packageh (V1271 V1272 V1273 V1274) (cond ((cons? V1273) (cons (shen.packageh V1271 V1272 (hd V1273) V1274) (shen.packageh V1271 V1272 (tl V1273) V1274))) ((or (shen.sysfunc? V1273) (or (variable? V1273) (or (element? V1273 V1272) (or (shen.doubleunderline? V1273) (shen.singleunderline? V1273))))) V1273) ((and (symbol? V1273) (let ExplodeX (explode V1273) (and (not (shen.prefix? (cons "s" (cons "h" (cons "e" (cons "n" (cons "." ()))))) ExplodeX)) (not (shen.prefix? V1274 ExplodeX))))) (concat V1271 V1273)) (true V1273)))




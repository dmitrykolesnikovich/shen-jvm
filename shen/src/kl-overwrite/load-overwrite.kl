(defun sj.forward-declare-functions (file-name ast)
  (cond ((= ast ()) ())
        ((cons? ast)
         (sj.forward-declare-functions
            file-name
            (if (cons? (hd ast))
                (let head (hd (hd ast))
                  (do (cond ((= head defun)
                             (sj.forward-declare-function file-name (hd ast)))
                            ((= head define)
                             (sj.forward-declare-function file-name (shen.elim-def (hd ast))))
                            (true ()))
                      (tl ast)))
                (tl ast))))
        (true (shen.f_error sj.forward-declare-functions))))

(defun load (V1651)
  (let Load
    (let Start (get-time run)
      (let ast (read-file V1651)
        (do (sj.forward-declare-functions V1651 ast)
            (let Result (shen.load-help (value shen.*tc*) ast)
              (let Finish (get-time run) (let Time (- Finish Start) (let Message (shen.prhush (cn "
run time: " (cn (str Time) " secs
")) (stoutput)) Result))))))) (let Infs (if (value shen.*tc*) (shen.prhush (cn "
typechecked in " (shen.app (inferences) " inferences
" shen.a)) (stoutput)) shen.skip) loaded)))
